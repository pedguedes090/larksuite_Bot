import { wbManager, userManager } from './utils.js';

export default async function handleShop({ userId, args }) {
    const action = args[1]?.toLowerCase();
    
    if (!action || action === 'list') {
        const items = Object.values(wbManager.items).filter(item => item.buyPrice);
        const skills = wbManager.getAllSkills().filter(skill => skill.buyPrice);
        
        const itemsByType = {};
        for (const item of items) {
            const type = item.type || 'other';
            if (!itemsByType[type]) itemsByType[type] = [];
            itemsByType[type].push(item);
        }
        let shopText = '--- üè™ **C·ª¨A H√ÄNG WORLD BOSS** ---\n';
        const typeNames = {
            weapon: '‚öîÔ∏è **V≈© kh√≠:**',
            armor: 'üõ°Ô∏è **Gi√°p:**',
            consumable: 'üß™ **Thu·ªëc:**',
            special: '‚ú® **ƒê·∫∑c bi·ªát:**',
            skill: 'üßô‚Äç‚ôÇÔ∏è **K·ªπ nƒÉng:**'
        };
        for (const [type, items] of Object.entries(itemsByType)) {
            if (type === 'material') continue; // Don't show materials in shop
            shopText += `\n${typeNames[type] || 'üìã **Kh√°c:**'}\n`;
            for (const item of items) {
                const levelReq = item.requiredLevel ? ` (Lv.${item.requiredLevel})` : '';
                shopText += ` ‚Ä¢ \`${item.id}\`: **${item.name}** - ${item.buyPrice} xu${levelReq}\n`;
            }
        }
        // Hi·ªÉn th·ªã skill
        if (skills.length > 0) {
            shopText += `\n${typeNames.skill}\n`;
            for (const skill of skills) {
                shopText += ` ‚Ä¢ \`${skill.id}\`: **${skill.name}** - ${skill.buyPrice} xu (MP: ${skill.mp_cost}, CD: ${skill.cooldown})\n   *${skill.description}*\n`;
            }
        }
        shopText += '\n**L·ªánh:** `wb shop buy <item_id|skill_id> [s·ªë l∆∞·ª£ng]` | `wb shop sell <item_id> [s·ªë l∆∞·ª£ng]`';
        return shopText;
    }
    if (action === 'buy') {
        if (args.length < 3) {
            return '‚ùå **Thi·∫øu tham s·ªë!** S·ª≠ d·ª•ng: `wb shop buy <item_id|skill_id> [s·ªë_l∆∞·ª£ng]`';
        }
        const id = args[2];
        const quantity = parseInt(args[3]) || 1;
        if (!id) return '‚ùå Vui l√≤ng ch·ªâ ƒë·ªãnh ID v·∫≠t ph·∫©m ho·∫∑c k·ªπ nƒÉng.';
        // ∆Øu ti√™n item
        let item = wbManager.getItem(id);
        if (item && item.buyPrice) {
            const wbUser = wbManager.getUser(userId);
            const generalUser = userManager.getUser(userId);
            if (item.requiredLevel && wbUser.level < item.requiredLevel) {
                return `‚ùå B·∫°n c·∫ßn ƒë·∫°t Level ${item.requiredLevel} ƒë·ªÉ mua ${item.name}.`;
            }
            const totalCost = item.buyPrice * quantity;
            if (generalUser.money < totalCost) {
                return `‚ùå Kh√¥ng ƒë·ªß ti·ªÅn! C·∫ßn ${totalCost} xu ƒë·ªÉ mua ${quantity} ${item.name}.`;
            }
            userManager.updateMoney(userId, -totalCost);
            wbManager.addItemToInventory(userId, id, quantity);
            return `‚úÖ ƒê√£ mua ${quantity} **${item.name}** v·ªõi gi√° ${totalCost} xu.`;
        }
        // N·∫øu kh√¥ng ph·∫£i item, ki·ªÉm tra skill
        const skill = wbManager.getSkill(id);
        if (skill && skill.buyPrice) {
            const generalUser = userManager.getUser(userId);
            if (generalUser.money < skill.buyPrice) {
                return `‚ùå Kh√¥ng ƒë·ªß ti·ªÅn! C·∫ßn ${skill.buyPrice} xu ƒë·ªÉ mua k·ªπ nƒÉng ${skill.name}.`;
            }
            if (wbManager.getUser(userId).skills?.includes(id)) {
                return '‚ùå B·∫°n ƒë√£ s·ªü h·ªØu k·ªπ nƒÉng n√†y.';
            }
            userManager.updateMoney(userId, -skill.buyPrice);
            wbManager.addSkillToUser(userId, id);
            return `‚úÖ ƒê√£ mua k·ªπ nƒÉng **${skill.name}** v·ªõi gi√° ${skill.buyPrice} xu.`;
        }
        return '‚ùå V·∫≠t ph·∫©m ho·∫∑c k·ªπ nƒÉng n√†y kh√¥ng c√≥ b√°n trong c·ª≠a h√†ng.';
    }
    
    if (action === 'sell') {
        if (args.length < 3) {
            return '‚ùå **Thi·∫øu tham s·ªë!** S·ª≠ d·ª•ng: `wb shop sell <item_id> [s·ªë_l∆∞·ª£ng]`';
        }
        
        const itemId = args[2];
        const quantity = parseInt(args[3]) || 1;
        
        if (!itemId) return '‚ùå Vui l√≤ng ch·ªâ ƒë·ªãnh ID v·∫≠t ph·∫©m.';
        
        const item = wbManager.getItem(itemId);
        if (!item || !item.sellPrice) {
            return '‚ùå V·∫≠t ph·∫©m n√†y kh√¥ng th·ªÉ b√°n.';
        }
        
        if (!wbManager.hasItem(userId, itemId, quantity)) {
            return `‚ùå B·∫°n kh√¥ng c√≥ ƒë·ªß ${quantity} ${item.name}.`;
        }
        
        const totalEarned = item.sellPrice * quantity;
        wbManager.removeItemFromInventory(userId, itemId, quantity);
        userManager.updateMoney(userId, totalEarned);
        
        return `‚úÖ ƒê√£ b√°n ${quantity} **${item.name}** v√† nh·∫≠n ${totalEarned} xu.`;
    }
    
    return '‚ùå L·ªánh kh√¥ng h·ª£p l·ªá. D√πng: list, buy, sell';
}

