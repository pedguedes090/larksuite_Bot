// modules/commands/wb.js
import UserManager from '../userManager.js';
import WB_DataManager from '../wbDataManager.js';

const userManager = UserManager.getInstance();
const wbManager = WB_DataManager.getInstance();

// --- Helper Functions ---

const MAX_LEVEL = 50; // Level cap
const XP_MULTIPLIER = 0.4; // Reduce XP gain to 40% of original

function calculateLevelFromXP(xp) {
  // New exponential XP system - all levels 5+ are harder than old linear system
  for (let level = 1; level <= MAX_LEVEL; level++) {
    const requiredXP = getXPRequiredForLevel(level);
    if (xp < requiredXP) {
      return level - 1;
    }
  }
  return MAX_LEVEL; // Cap at maximum level
}

function getXPRequiredForLevel(level) {
  if (level <= 1) return 0;
  if (level > MAX_LEVEL) return Infinity;
  
  // New exponential formula: base=90, scale=1.2
  // Level 5: +21% harder, Level 10: +107% harder, Level 20: +632% harder
  const baseXP = 90;
  const scaleFactor = 1.2;
  
  let totalXP = 0;
  for (let i = 2; i <= level; i++) {
    const xpForThisLevel = Math.floor(baseXP * Math.pow(scaleFactor, i - 2));
    totalXP += xpForThisLevel;
  }
  return totalXP;
}

function getXPOverflow(currentXP, level) {
  if (level >= MAX_LEVEL) {
    const maxLevelXP = getXPRequiredForLevel(MAX_LEVEL);
    return Math.max(0, currentXP - maxLevelXP);
  }
  return 0;
}

function getXPRequiredForSingleLevel(level) {
  // XP needed to go from level (N-1) to level N
  if (level <= 1) return 0;
  const baseXP = 90;
  const scaleFactor = 1.2;
  return Math.floor(baseXP * Math.pow(scaleFactor, level - 2));
}

function calculateStatsForLevel(level) {
  const baseHp = 100;
  const baseMp = 50;
  const baseAttack = 10;
  const baseDefense = 5;
  
  return {
    maxHp: baseHp + (level - 1) * 20,
    maxMp: baseMp + (level - 1) * 10,
    baseAttack: baseAttack + (level - 1) * 3,
    baseDefense: baseDefense + (level - 1) * 2
  };
}

function formatTime(hours) {
  if (hours >= 24) {
    const days = Math.floor(hours / 24);
    const remainingHours = hours % 24;
    return `${days} ng√†y${remainingHours > 0 ? ` ${remainingHours} gi·ªù` : ''}`;
  }
  return `${hours} gi·ªù`;
}

function generateMonsterBuffs(monster) {
  // Random buffs from 0-40% for each stat
  const hpBuff = Math.random() * 0.4; // 0-40%
  const attackBuff = Math.random() * 0.4; // 0-40%  
  const defenseBuff = Math.random() * 0.4; // 0-40%
  
  // Base armor penetration (0-20% of monster's attack as penetration)
  const baseArmorPen = Math.floor((monster.attack || 5) * 0.2); // Base 20% of attack
  const armorPenBuff = Math.random() * 0.4; // 0-40% additional buff
  const armorPenetration = Math.floor(baseArmorPen * (1 + armorPenBuff));
  
  const buffedStats = {
    hp: Math.floor(monster.hp * (1 + hpBuff)),
    attack: Math.floor(monster.attack * (1 + attackBuff)),
    defense: Math.floor(monster.defense * (1 + defenseBuff)),
    armorPenetration: armorPenetration,
    buffs: {
      hp: hpBuff,
      attack: attackBuff,
      defense: defenseBuff,
      armorPenetration: armorPenBuff
    }
  };
  
  return buffedStats;
}

function getBuffMessage(monster, buffedStats) {
  const buffs = buffedStats.buffs;
  let buffMessages = [];
  
  if (buffs.hp > 0.05) { // Only show if >5%
    buffMessages.push(`üí™ +${Math.round(buffs.hp * 100)}% HP`);
  }
  if (buffs.attack > 0.05) {
    buffMessages.push(`‚öîÔ∏è +${Math.round(buffs.attack * 100)}% ATK`);
  }
  if (buffs.defense > 0.05) {
    buffMessages.push(`üõ°Ô∏è +${Math.round(buffs.defense * 100)}% DEF`);
  }
  if (buffedStats.armorPenetration > 0) {
    buffMessages.push(`üó°Ô∏è ${buffedStats.armorPenetration} Xuy√™n Gi√°p`);
  }
  
  if (buffMessages.length > 0) {
    return `\nüî• **${monster.name} ƒë∆∞·ª£c tƒÉng c∆∞·ªùng!** (${buffMessages.join(', ')})`;
  }
  
  return '';
}

function resetCombatState() {
  return { 
    inCombat: false, 
    monsterId: null, 
    monsterHp: 0, 
    monsterMaxHp: null,
    monsterBuffedAttack: null,
    monsterBuffedDefense: null,
    monsterArmorPenetration: null,
    mapId: null 
  };
}

// --- Sub-command Handlers ---

async function handleInfo({ userId, args }) {
  const generalUser = userManager.getUser(userId);
  const wbUser = wbManager.getUser(userId);
  const stats = wbManager.getEquippedStats(userId);
  const buffs = wbManager.getActiveBuffs(userId);
  
  let buffText = '';
  if (buffs.length > 0) {
    buffText = '\nüîÆ **Buff hi·ªán t·∫°i:** ' + buffs.map(b => 
      `${b.type === 'attack' ? '‚öîÔ∏è' : b.type === 'defense' ? 'üõ°Ô∏è' : 'üçÄ'} +${Math.round(b.amount * 100)}% (${b.turnsRemaining} l∆∞·ª£t)`
    ).join(', ');
  }
  
  let equipmentText = '';
  if (wbUser.equipment.weapon || wbUser.equipment.armor) {
    const weapon = wbUser.equipment.weapon ? wbManager.getItem(wbUser.equipment.weapon) : null;
    const armor = wbUser.equipment.armor ? wbManager.getItem(wbUser.equipment.armor) : null;
    
    equipmentText = `\nüéΩ **Trang b·ªã:**${weapon ? ` ‚öîÔ∏è ${weapon.name}` : ''}${armor ? ` üõ°Ô∏è ${armor.name}` : ''}`;
  }

  return `--- üåü **TH√îNG TIN NH√ÇN V·∫¨T: ${generalUser.userId}** ---
‚ù§Ô∏è **HP:** ${wbUser.hp} / ${wbUser.maxHp + stats.hpBonus}
üíô **MP:** ${wbUser.mp} / ${wbUser.maxMp}
‚≠ê **Level:** ${wbUser.level}/${MAX_LEVEL} (${wbUser.xp}/${getXPRequiredForLevel(wbUser.level + 1)} XP)${wbUser.level >= MAX_LEVEL ? ' üåü MAX!' : ''}
‚öîÔ∏è **T·∫•n c√¥ng:** ${stats.attack} (Base: ${wbUser.baseAttack})
üõ°Ô∏è **Ph√≤ng th·ªß:** ${stats.defense} (Base: ${wbUser.baseDefense})
üí∞ **Ti·ªÅn:** ${generalUser.money}${equipmentText}${buffText}
‚öîÔ∏è **Tr·∫°ng th√°i:** ${wbUser.combatState.inCombat ? `ƒêang chi·∫øn ƒë·∫•u v·ªõi ${wbManager.getMonster(wbUser.combatState.monsterId)?.name || 'Unknown Monster'}` : 'An to√†n'}`;
}

async function handleMap({ userId, args }) {
  const safeMaps = wbManager.getMapsByType('safe');
  const normalMaps = wbManager.getMapsByType('normal');
  const dangerousMaps = wbManager.getMapsByType('dangerous');
  const extremeMaps = wbManager.getMapsByType('extreme');
  const bossAreas = wbManager.getMapsByType('boss_area');
  const worldBossAreas = wbManager.getMapsByType('world_boss_area');
  const randomMaps = wbManager.getMapsByType('random');
  const legendaryMaps = wbManager.getMapsByType('legendary');
  
  let mapsList = '';
  
  if (safeMaps.length > 0) {
    mapsList += '\nüå± **B·∫£n ƒë·ªì an to√†n:**\n' + safeMaps.map(m => ` ‚Ä¢ \`${m.id}\`: ${m.name} (Lv.${m.requiredLevel})`).join('\n');
  }
  if (normalMaps.length > 0) {
    mapsList += '\nüå≤ **B·∫£n ƒë·ªì th∆∞·ªùng:**\n' + normalMaps.map(m => ` ‚Ä¢ \`${m.id}\`: ${m.name} (Lv.${m.requiredLevel})`).join('\n');
  }
  if (dangerousMaps.length > 0) {
    mapsList += '\n‚ö†Ô∏è **B·∫£n ƒë·ªì nguy hi·ªÉm:**\n' + dangerousMaps.map(m => ` ‚Ä¢ \`${m.id}\`: ${m.name} (Lv.${m.requiredLevel})`).join('\n');
  }
  if (extremeMaps.length > 0) {
    mapsList += '\nüî• **B·∫£n ƒë·ªì c·ª±c hi·ªÉm:**\n' + extremeMaps.map(m => ` ‚Ä¢ \`${m.id}\`: ${m.name} (Lv.${m.requiredLevel})`).join('\n');
  }
  if (bossAreas.length > 0) {
    mapsList += '\nüëë **Khu v·ª±c Boss:**\n' + bossAreas.map(m => {
      const cooldownHours = wbManager.getCooldownRemaining(userId, m.id);
      const cooldownText = cooldownHours > 0 ? ` (‚è∞ ${formatTime(cooldownHours)})` : '';
      return ` ‚Ä¢ \`${m.id}\`: ${m.name} (Lv.${m.requiredLevel})${cooldownText}`;
    }).join('\n');
  }
  if (worldBossAreas.length > 0) {
    mapsList += '\nüêâ **Khu v·ª±c World Boss:**\n' + worldBossAreas.map(m => {
      const cooldownHours = wbManager.getCooldownRemaining(userId, m.id);
      const cooldownText = cooldownHours > 0 ? ` (‚è∞ ${formatTime(cooldownHours)})` : '';
      return ` ‚Ä¢ \`${m.id}\`: ${m.name} (Lv.${m.requiredLevel})${cooldownText}`;
    }).join('\n');
  }
  if (randomMaps.length > 0) {
    mapsList += '\nüé≤ **B·∫£n ƒë·ªì ƒë·∫∑c bi·ªát:**\n' + randomMaps.map(m => ` ‚Ä¢ \`${m.id}\`: ${m.name} (Lv.${m.requiredLevel})`).join('\n');
  }
  if (legendaryMaps.length > 0) {
    mapsList += '\n‚ú® **B·∫£n ƒë·ªì huy·ªÅn tho·∫°i:**\n' + legendaryMaps.map(m => {
      const cooldownHours = wbManager.getCooldownRemaining(userId, m.id);
      const cooldownText = cooldownHours > 0 ? ` (‚è∞ ${formatTime(cooldownHours)})` : '';
      return ` ‚Ä¢ \`${m.id}\`: ${m.name} (Lv.${m.requiredLevel})${cooldownText}`;
    }).join('\n');
  }
  
  return `--- üó∫Ô∏è **T·∫§T C·∫¢ B·∫¢N ƒê·ªí** ---${mapsList}\n\n**S·ª≠ d·ª•ng:** \`wb hunt <map_id>\` ƒë·ªÉ v√†o b·∫£n ƒë·ªì`;
}

async function handleHunt({ userId, args }) {
  if (args.length < 2) {
    return `‚ùå **Thi·∫øu tham s·ªë!** S·ª≠ d·ª•ng: \`wb hunt <map_id>\`
D√πng \`wb map\` ƒë·ªÉ xem danh s√°ch b·∫£n ƒë·ªì c√≥ s·∫µn.`;
  }
  
  const mapId = args[1];
  const wbUser = wbManager.getUser(userId);

  if (wbUser.combatState.inCombat) {
    return `‚ùå B·∫°n ƒëang trong m·ªôt tr·∫≠n chi·∫øn! D√πng \`wb pve\` ƒë·ªÉ ti·∫øp t·ª•c.`;
  }
  
  const map = wbManager.getMap(mapId);
  if (!map) {
    return `‚ùå Kh√¥ng t√¨m th·∫•y b·∫£n ƒë·ªì v·ªõi ID: \`${mapId}\``;
  }

  if (wbUser.level < map.requiredLevel) {
    return `‚ùå B·∫°n c·∫ßn ƒë·∫°t **Level ${map.requiredLevel}** ƒë·ªÉ v√†o ${map.name}.`;
  }
  
  // Check cooldown for boss areas
  if (map.bossOnly && wbManager.isOnCooldown(userId, mapId)) {
    const remaining = wbManager.getCooldownRemaining(userId, mapId);
    return `‚è∞ B·∫°n c·∫ßn ch·ªù ${formatTime(remaining)} n·ªØa ƒë·ªÉ v√†o ${map.name}.`;
  }

  const monsterId = map.monsterIds[Math.floor(Math.random() * map.monsterIds.length)];
  const monster = wbManager.getMonster(monsterId);

  if (!monster) {
    return `‚ùå L·ªói h·ªá th·ªëng: Kh√¥ng t√¨m th·∫•y qu√°i v·∫≠t v·ªõi ID ${monsterId}`;
  }

  // Set cooldown for boss areas
  if (map.bossOnly) {
    wbManager.setCooldown(userId, mapId);
  }
  
  // Update quest progress
  wbManager.updateQuestProgress(userId, 'explore');

  // Generate random buffs for monster (0-40% each stat)
  const buffedStats = generateMonsterBuffs(monster);
  const buffMessage = getBuffMessage(monster, buffedStats);

  wbManager.updateUser(userId, {
    combatState: {
      inCombat: true,
      monsterId: monster.id,
      monsterHp: buffedStats.hp, // Use buffed HP
      monsterMaxHp: buffedStats.hp, // Store max HP for display
      monsterBuffedAttack: buffedStats.attack, // Store buffed attack
      monsterBuffedDefense: buffedStats.defense, // Store buffed defense
      monsterArmorPenetration: buffedStats.armorPenetration, // Store armor penetration
      mapId: map.id
    }
  });

  const dangerEmoji = monster.type === 'boss' ? 'üëë' : monster.type === 'world_boss' ? 'üêâ' : '‚öîÔ∏è';
  return `üå≤ B·∫°n ƒë√£ ti·∫øn v√†o **${map.name}** v√† g·∫∑p m·ªôt **${monster.name}**! ${dangerEmoji}
${map.description}${buffMessage}
D√πng l·ªánh \`wb pve\` ƒë·ªÉ t·∫•n c√¥ng!`;
}

async function handlePve({ userId, args }) {
    const wbUser = wbManager.getUser(userId);
    if (!wbUser.combatState.inCombat) {
        return `‚ùå B·∫°n kh√¥ng ·ªü trong tr·∫≠n chi·∫øn n√†o. D√πng \`wb hunt <map_id>\` ƒë·ªÉ t√¨m qu√°i v·∫≠t.`;
    }
    const skillId = args[0] && !['auto', 'safe'].includes(args[0]) ? args[0] : null;
    const mode = args[0]?.toLowerCase();
    if (mode === 'auto') {
        return await handleAutoCombat(userId, false);
    } else if (mode === 'safe') {
        return await handleAutoCombat(userId, true);
    }
    const monster = wbManager.getMonster(wbUser.combatState.monsterId);
    const stats = wbManager.getEquippedStats(userId);
    if (!monster) {
        wbManager.updateUser(userId, { combatState: resetCombatState() });
        return `‚ùå L·ªói h·ªá th·ªëng: Qu√°i v·∫≠t kh√¥ng t·ªìn t·∫°i. Tr·∫≠n chi·∫øn ƒë√£ ƒë∆∞·ª£c reset.`;
    }
    let combatLog = [];
    let playerDamage = Math.max(1, stats.attack - (wbUser.combatState.monsterBuffedDefense || monster.defense));
    let skillMessage = '';
    // N·∫øu c√≥ skillId, ki·ªÉm tra v√† th·ª±c hi·ªán skill
    if (skillId) {
        const skill = wbManager.getSkill(skillId);
        if (!skill) return '‚ùå K·ªπ nƒÉng kh√¥ng t·ªìn t·∫°i.';
        if (!wbUser.equippedSkills || !wbUser.equippedSkills.includes(skillId)) return '‚ùå K·ªπ nƒÉng ch∆∞a ƒë∆∞·ª£c trang b·ªã.';
        if (wbUser.skillCooldowns?.[skillId] > 0) return `‚ùå K·ªπ nƒÉng ƒëang h·ªìi (${wbUser.skillCooldowns[skillId]} l∆∞·ª£t).`;
        if (wbUser.mp < skill.mp_cost) return '‚ùå Kh√¥ng ƒë·ªß MP.';
        // Tr·ª´ mp, set cooldown
        wbUser.mp -= skill.mp_cost;
        wbUser.skillCooldowns = wbUser.skillCooldowns || {};
        wbUser.skillCooldowns[skillId] = skill.cooldown;
        wbManager.saveUsers();
        // Th·ª±c hi·ªán hi·ªáu ·ª©ng skill
        switch (skill.effect) {
            case 'double_attack':
                playerDamage = Math.max(1, Math.floor(stats.attack * 0.8) - (wbUser.combatState.monsterBuffedDefense || monster.defense));
                combatLog.push(`üåÄ B·∫°n d√πng ${skill.name}! T·∫•n c√¥ng 2 l·∫ßn, m·ªói ƒë√≤n ${playerDamage} s√°t th∆∞∆°ng.`);
                combatLog.push(`üí• ƒê√≤n 1: ${playerDamage} s√°t th∆∞∆°ng.`);
                combatLog.push(`üí• ƒê√≤n 2: ${playerDamage} s√°t th∆∞∆°ng.`);
                playerDamage = playerDamage * 2;
                skillMessage = ` (K·ªπ nƒÉng: ${skill.name})`;
                break;
            case 'heal_30':
                const maxHp = wbUser.maxHp + stats.hpBonus;
                const heal = Math.floor(maxHp * 0.3);
                wbUser.hp = Math.min(maxHp, wbUser.hp + heal);
                wbManager.saveUsers();
                combatLog.push(`üíö B·∫°n d√πng ${skill.name}! H·ªìi ${heal} HP (${wbUser.hp}/${maxHp})`);
                playerDamage = 0;
                skillMessage = ` (K·ªπ nƒÉng: ${skill.name})`;
                break;
            case 'buff_def_40_2':
                wbManager.addBuff(userId, 'defense', 0.4, 2);
                combatLog.push(`üõ°Ô∏è B·∫°n d√πng ${skill.name}! TƒÉng 40% ph√≤ng th·ªß trong 2 l∆∞·ª£t.`);
                playerDamage = Math.max(1, stats.attack - (wbUser.combatState.monsterBuffedDefense || monster.defense));
                skillMessage = ` (K·ªπ nƒÉng: ${skill.name})`;
                break;
            case 'fireball':
                playerDamage = Math.max(1, Math.floor(stats.attack * 1.5) - Math.floor((wbUser.combatState.monsterBuffedDefense || monster.defense) * 0.8));
                combatLog.push(`üî• B·∫°n d√πng ${skill.name}! G√¢y ${playerDamage} s√°t th∆∞∆°ng ph√©p (b·ªè qua 20% ph√≤ng th·ªß).`);
                skillMessage = ` (K·ªπ nƒÉng: ${skill.name})`;
                break;
            case 'buff_atk_30_def_-20_3':
                wbManager.addBuff(userId, 'attack', 0.3, 3);
                wbManager.addBuff(userId, 'defense', -0.2, 3);
                combatLog.push(`üí¢ B·∫°n d√πng ${skill.name}! TƒÉng 30% t·∫•n c√¥ng, gi·∫£m 20% ph√≤ng th·ªß trong 3 l∆∞·ª£t.`);
                playerDamage = Math.max(1, stats.attack - (wbUser.combatState.monsterBuffedDefense || monster.defense));
                skillMessage = ` (K·ªπ nƒÉng: ${skill.name})`;
                break;
            default:
                combatLog.push(`B·∫°n d√πng ${skill.name} nh∆∞ng ch∆∞a c√≥ hi·ªáu ·ª©ng!`);
        }
    }
    // Player attacks monster
    const newMonsterHp = wbUser.combatState.monsterHp - playerDamage;
    if (!skillId) combatLog.push(`üí• B·∫°n t·∫•n c√¥ng ${monster.name}, g√¢y ${playerDamage} s√°t th∆∞∆°ng. HP qu√°i c√≤n: ${Math.max(0, newMonsterHp)}/${wbUser.combatState.monsterMaxHp || monster.hp}`);
    else combatLog.push(`üí• T·ªïng s√°t th∆∞∆°ng l√™n qu√°i: ${playerDamage}. HP qu√°i c√≤n: ${Math.max(0, newMonsterHp)}/${wbUser.combatState.monsterMaxHp || monster.hp}`);
    // Check if monster is defeated
    if (newMonsterHp <= 0) {
        // === LOGIC CHI·∫æN TH·∫ÆNG ===
        const xpGained = Math.floor(monster.xpDrop * XP_MULTIPLIER);
        const newXP = wbUser.xp + xpGained;
        const oldLevel = wbUser.level;
        const newLevel = calculateLevelFromXP(newXP);
        let lootLog = [];
        let goldGained = 0;
        // Handle loot with luck buff
        const luckBuff = wbUser.buffs.find(b => b.type === 'luck');
        const luckMultiplier = luckBuff ? (1 + luckBuff.amount) : 1;
        for (const drop of monster.drops) {
            const adjustedChance = Math.min(1, drop.chance * luckMultiplier);
            if (Math.random() < adjustedChance) {
                const item = wbManager.getItem(drop.itemId);
                if (!item) continue;
                if (drop.itemId === 'gold_coin') {
                    goldGained += drop.quantity;
                } else {
                    wbManager.addItemToInventory(userId, drop.itemId, drop.quantity);
                }
                lootLog.push(`  + ${drop.quantity} ${item.name}`);
            }
        }
        // Update statistics
        wbManager.updateStatistic(userId, 'monstersKilled');
        if (monster.type === 'boss' || monster.type === 'world_boss') {
            wbManager.updateStatistic(userId, 'bossesKilled');
        }
        if (lootLog.length > 0) {
            wbManager.updateStatistic(userId, 'itemsFound', lootLog.length);
        }
        // Update quest progress
        wbManager.updateQuestProgress(userId, 'kill', monster.id);
        wbManager.updateQuestProgress(userId, 'loot', null, lootLog.length);
        let levelUpMessage = '';
        if (newLevel > oldLevel) {
            const newStats = calculateStatsForLevel(newLevel);
            const hpIncrease = newStats.maxHp - wbUser.maxHp;
            const mpIncrease = newStats.maxMp - wbUser.maxMp;
            levelUpMessage = `\nüéä **LEVEL UP!** Level ${oldLevel} ‚Üí Level ${newLevel}\nüìà **TƒÉng th·ªÉ l·ª±c:** +${hpIncrease} HP, +${mpIncrease} MP, +${newStats.baseAttack - wbUser.baseAttack} ATK, +${newStats.baseDefense - wbUser.baseDefense} DEF`;
            if (newLevel >= MAX_LEVEL) {
                const overflow = getXPOverflow(newXP, newLevel);
                levelUpMessage += `\nüåü **ƒê√É ƒê·∫†T LEVEL T·ªêI ƒêA!** (${overflow} XP th·ª´a s·∫Ω ƒë∆∞·ª£c l∆∞u)`;
            }
            wbManager.updateUser(userId, {
                level: newLevel,
                xp: newXP,
                maxHp: newStats.maxHp,
                maxMp: newStats.maxMp,
                hp: newStats.maxHp,
                mp: newStats.maxMp,
                baseAttack: newStats.baseAttack,
                baseDefense: newStats.baseDefense,
                combatState: resetCombatState()
            });
        } else {
            wbManager.updateUser(userId, {
                xp: newXP,
                combatState: resetCombatState()
            });
        }
        if (goldGained > 0) {
            userManager.updateMoney(userId, goldGained);
        }
        combatLog.push('');
        combatLog.push(`üéâ **CHI·∫æN TH·∫ÆNG!** üéâ`);
        combatLog.push(`ƒê√£ h·∫° g·ª•c ${monster.name}!`);
        combatLog.push(`‚≠ê **Nh·∫≠n ƒë∆∞·ª£c:** ${xpGained} XP${goldGained > 0 ? ` v√† ${goldGained} xu` : ''}`);
        combatLog.push(`üéÅ **V·∫≠t ph·∫©m r∆°i:**\n${lootLog.length > 0 ? lootLog.join('\n') : 'Kh√¥ng c√≥ g√¨ c·∫£.'}`);
        if (levelUpMessage) combatLog.push(levelUpMessage);
        // RETURN NGAY L·∫¨P T·ª®C, KH√îNG ƒê·ªÇ V√íNG L·∫∂P CH·∫†Y TI·∫æP
        return combatLog.join('\n');
    }
    // Monster turn: n·∫øu monster c√≥ skills, c√≥ x√°c su·∫•t d√πng skill
    let monsterSkillMsg = '';
    const monsterSkills = monster.skills || [];
    let monsterUsedSkill = null;
    if (monsterSkills.length > 0 && Math.random() < 0.5) { // 50% d√πng skill n·∫øu c√≥
        const skillId = monsterSkills[Math.floor(Math.random() * monsterSkills.length)];
        const skill = wbManager.getSkill(skillId);
        if (skill) {
            monsterUsedSkill = skill;
            switch (skill.effect) {
                case 'double_attack':
                    monsterDamage = Math.max(1, Math.floor((wbUser.combatState.monsterBuffedAttack || monster.attack) * 0.8) - stats.defense);
                    monsterSkillMsg = `üåÄ ${monster.name} d√πng ${skill.name}! T·∫•n c√¥ng 2 l·∫ßn, m·ªói ƒë√≤n ${monsterDamage} s√°t th∆∞∆°ng.`;
                    monsterDamage = monsterDamage * 2;
                    break;
                case 'fireball':
                    monsterDamage = Math.max(1, Math.floor((wbUser.combatState.monsterBuffedAttack || monster.attack) * 1.5) - Math.floor(stats.defense * 0.8));
                    monsterSkillMsg = `üî• ${monster.name} d√πng ${skill.name}! G√¢y ${monsterDamage} s√°t th∆∞∆°ng ph√©p (b·ªè qua 20% ph√≤ng th·ªß).`;
                    break;
                case 'heal_30':
                    const maxHp = wbUser.combatState.monsterMaxHp || monster.hp;
                    const heal = Math.floor(maxHp * 0.3);
                    wbManager.updateUser(userId, { combatState: { ...wbUser.combatState, monsterHp: Math.min(maxHp, newMonsterHp + heal) } });
                    monsterSkillMsg = `üíö ${monster.name} d√πng ${skill.name}! H·ªìi ${heal} HP.`;
                    break;
                case 'buff_def_40_2':
                    // Kh√¥ng l∆∞u tr·∫°ng th√°i buff cho qu√°i, ch·ªâ th√¥ng b√°o
                    monsterSkillMsg = `üõ°Ô∏è ${monster.name} d√πng ${skill.name}! TƒÉng ph√≤ng th·ªß.`;
                    break;
                case 'buff_atk_30_def_-20_3':
                    monsterSkillMsg = `üí¢ ${monster.name} d√πng ${skill.name}! TƒÉng t·∫•n c√¥ng, gi·∫£m ph√≤ng th·ªß.`;
                    break;
                default:
                    monsterSkillMsg = `${monster.name} d√πng ${skill.name}!`;
            }
        }
    }
    // Monster attacks player
    let monsterDamage = Math.max(1, (wbUser.combatState.monsterBuffedAttack || monster.attack) - stats.defense);
    if (monsterUsedSkill && (monsterUsedSkill.effect === 'double_attack' || monsterUsedSkill.effect === 'fireball')) {
        // monsterDamage ƒë√£ t√≠nh ·ªü tr√™n
    }
    const newPlayerHp = wbUser.hp - monsterDamage;
    if (monsterSkillMsg) combatLog.push(monsterSkillMsg);
    combatLog.push(`ü©∏ ${monster.name} t·∫•n c√¥ng b·∫°n, g√¢y ${monsterDamage} s√°t th∆∞∆°ng. HP c·ªßa b·∫°n c√≤n: ${Math.max(0, newPlayerHp)}/${wbUser.maxHp + stats.hpBonus}`);
    // Check if player is defeated
    if (newPlayerHp <= 0) {
        // Check for revival stone with cooldown
        const now = Date.now();
        const revivalCooldown = 60000; // 1 minute cooldown
        
        if (wbManager.hasItem(userId, 'revival_stone') && 
            (!wbUser.lastRevivalUse || now - wbUser.lastRevivalUse >= revivalCooldown)) {
            
            wbManager.removeItemFromInventory(userId, 'revival_stone', 1);
            const reviveHp = Math.floor(wbUser.maxHp * 0.5);
            
            wbManager.updateUser(userId, {
                hp: reviveHp,
                lastRevivalUse: now,
                combatState: {
                    ...wbUser.combatState,
                    monsterHp: newMonsterHp
                }
            });
            
            return `üíé **ƒê√Å H·ªíI SINH K√çCH HO·∫†T!** üíé
B·∫°n ƒë√£ h·ªìi sinh v·ªõi ${reviveHp} HP! Ti·∫øp t·ª•c chi·∫øn ƒë·∫•u!

${combatLog.join('\n')}`;
        }
        
        const xpLost = Math.min(Math.floor(wbUser.xp * 0.1), 50); // Cap XP loss at 50
        const newXP = Math.max(0, wbUser.xp - xpLost);
        const newLevel = calculateLevelFromXP(newXP);
        
        let levelDownMessage = '';
        if (newLevel < wbUser.level) {
            const newStats = calculateStatsForLevel(newLevel);
            levelDownMessage = `\nüìâ **Xu·ªëng c·∫•p:** Level ${wbUser.level} ‚Üí Level ${newLevel}`;
            
            wbManager.updateUser(userId, {
                level: newLevel,
                xp: newXP,
                maxHp: newStats.maxHp,
                maxMp: newStats.maxMp,
                hp: 1,
                mp: newStats.maxMp,
                baseAttack: newStats.baseAttack,
                baseDefense: newStats.baseDefense,
                combatState: resetCombatState()
            });
        } else {
            wbManager.updateUser(userId, {
                xp: newXP,
                hp: 1,
                combatState: resetCombatState()
            });
        }

        const defeatMessage = `‚ò†Ô∏è **TH·∫§T B·∫†I!** ‚ò†Ô∏è
B·∫°n ƒë√£ b·ªã ${monster.name} h·∫° g·ª•c.
- B·∫°n b·ªã m·∫•t ${xpLost} XP.
- B·∫°n ƒë√£ ƒë∆∞·ª£c h·ªìi sinh t·∫°i th√†nh v·ªõi 1 HP.${levelDownMessage}`;

        return defeatMessage;
    }
    // Decrease buff turns after combat turn
    wbManager.decreaseBuffTurns(userId);
    // Gi·∫£m cooldown skill
    wbManager.decreaseSkillCooldowns(userId);
    wbManager.updateUser(userId, {
        hp: newPlayerHp,
        mp: wbUser.mp,
        skillCooldowns: wbUser.skillCooldowns,
        combatState: {
            ...wbUser.combatState,
            monsterHp: newMonsterHp
        }
    });
    // Hi·ªÉn th·ªã buff hi·ªán t·∫°i
    const buffs = wbManager.getActiveBuffs(userId);
    if (buffs.length > 0) {
      combatLog.push('üîÆ Buff hi·ªán t·∫°i: ' + buffs.map(b => `${b.type === 'attack' ? '‚öîÔ∏è' : b.type === 'defense' ? 'üõ°Ô∏è' : 'üçÄ'} +${Math.round(b.amount * 100)}% (${b.turnsRemaining} l∆∞·ª£t)`).join(', '));
    }
    return combatLog.join('\n');
}

// New auto-combat function
async function handleAutoCombat(userId, safeMode = false) {
    const wbUser = wbManager.getUser(userId);
    const monster = wbManager.getMonster(wbUser.combatState.monsterId);
    if (!monster) {
        wbManager.updateUser(userId, { combatState: resetCombatState() });
        return `‚ùå L·ªói h·ªá th·ªëng: Qu√°i v·∫≠t kh√¥ng t·ªìn t·∫°i. Tr·∫≠n chi·∫øn ƒë√£ ƒë∆∞·ª£c reset.`;
    }
    let combatLog = [];
    let turnCount = 0;
    let currentMonsterHp = wbUser.combatState.monsterHp;
    let currentPlayerHp = wbUser.hp;
    let currentMp = wbUser.mp;
    let skillCooldowns = { ...(wbUser.skillCooldowns || {}) };
    const maxTurns = 50;
    const equippedSkills = wbUser.equippedSkills || [];
    combatLog.push(`‚öîÔ∏è **${safeMode ? 'SAFE AUTO-COMBAT' : 'AUTO-COMBAT'}** vs ${monster.name} b·∫Øt ƒë·∫ßu!`);
    combatLog.push(`Monster HP: ${currentMonsterHp}/${wbUser.combatState.monsterMaxHp || monster.hp} | Your HP: ${currentPlayerHp}/${wbUser.maxHp}`);
    combatLog.push('');
    while (currentMonsterHp > 0 && currentPlayerHp > 0 && turnCount < maxTurns) {
        turnCount++;
        const stats = wbManager.getEquippedStats(userId);
        // --- AUTO SKILL LOGIC ---
        let usedSkill = null;
        let skillMsg = '';
        // ∆Øu ti√™n heal n·∫øu HP < 50%
        for (const skillId of equippedSkills) {
            const skill = wbManager.getSkill(skillId);
            if (!skill) continue;
            if (skill.category === 'heal' && skillCooldowns[skillId] <= 0 && currentMp >= skill.mp_cost && currentPlayerHp < wbUser.maxHp * 0.5) {
                usedSkill = skill;
                break;
            }
        }
        // N·∫øu kh√¥ng c√≥ heal, ∆∞u ti√™n attack
        if (!usedSkill) {
            for (const skillId of equippedSkills) {
                const skill = wbManager.getSkill(skillId);
                if (!skill) continue;
                if (skill.category === 'attack' && skillCooldowns[skillId] <= 0 && currentMp >= skill.mp_cost) {
                    usedSkill = skill;
                    break;
                }
            }
        }
        // N·∫øu kh√¥ng c√≥ attack, ∆∞u ti√™n buff
        if (!usedSkill) {
            for (const skillId of equippedSkills) {
                const skill = wbManager.getSkill(skillId);
                if (!skill) continue;
                if (skill.category === 'buff' && skillCooldowns[skillId] <= 0 && currentMp >= skill.mp_cost) {
                    usedSkill = skill;
                    break;
                }
            }
        }
        let playerDamage = Math.max(1, stats.attack - (wbUser.combatState.monsterBuffedDefense || monster.defense));
        if (usedSkill) {
            currentMp -= usedSkill.mp_cost;
            skillCooldowns[usedSkill.id] = usedSkill.cooldown;
            switch (usedSkill.effect) {
                case 'double_attack':
                    playerDamage = Math.max(1, Math.floor(stats.attack * 0.8) - (wbUser.combatState.monsterBuffedDefense || monster.defense));
                    skillMsg = `üåÄ D√πng ${usedSkill.name}! 2 ƒë√≤n, m·ªói ƒë√≤n ${playerDamage} s√°t th∆∞∆°ng.`;
                    playerDamage = playerDamage * 2;
                    break;
                case 'heal_30':
                    const maxHp = wbUser.maxHp + stats.hpBonus;
                    const heal = Math.floor(maxHp * 0.3);
                    currentPlayerHp = Math.min(maxHp, currentPlayerHp + heal);
                    skillMsg = `üíö D√πng ${usedSkill.name}! H·ªìi ${heal} HP (${currentPlayerHp}/${maxHp})`;
                    playerDamage = 0;
                    break;
                case 'buff_def_40_2':
                    wbManager.addBuff(userId, 'defense', 0.4, 2);
                    skillMsg = `üõ°Ô∏è D√πng ${usedSkill.name}! TƒÉng 40% ph√≤ng th·ªß 2 l∆∞·ª£t.`;
                    break;
                case 'fireball':
                    playerDamage = Math.max(1, Math.floor(stats.attack * 1.5) - Math.floor((wbUser.combatState.monsterBuffedDefense || monster.defense) * 0.8));
                    skillMsg = `üî• D√πng ${usedSkill.name}! G√¢y ${playerDamage} s√°t th∆∞∆°ng ph√©p.`;
                    break;
                case 'buff_atk_30_def_-20_3':
                    wbManager.addBuff(userId, 'attack', 0.3, 3);
                    wbManager.addBuff(userId, 'defense', -0.2, 3);
                    skillMsg = `üí¢ D√πng ${usedSkill.name}! TƒÉng 30% t·∫•n c√¥ng, gi·∫£m 20% ph√≤ng th·ªß 3 l∆∞·ª£t.`;
                    break;
                default:
                    skillMsg = `D√πng ${usedSkill.name}!`;
            }
        }
        // Lu√¥n log r√µ r√†ng skill ho·∫∑c ƒë√°nh th∆∞·ªùng
        if (skillMsg) {
            combatLog.push(`Turn ${turnCount}: ${skillMsg}`);
        } else {
            combatLog.push(`Turn ${turnCount}: üí• ƒê√°nh th∆∞·ªùng!`);
        }
        // Player attacks monster
        currentMonsterHp -= playerDamage;
        combatLog.push(`   üí• G√¢y ${playerDamage} s√°t th∆∞∆°ng. Monster HP: ${Math.max(0, currentMonsterHp)}/${wbUser.combatState.monsterMaxHp || monster.hp}`);
        
        if (currentMonsterHp <= 0) {
            // Victory logic
            const xpGained = Math.floor(monster.xpDrop * XP_MULTIPLIER);
            const newXP = wbUser.xp + xpGained;
            const oldLevel = wbUser.level;
            const newLevel = calculateLevelFromXP(newXP);
            let lootLog = [];
            let goldGained = 0;
            
            // Handle loot
            for (const drop of monster.drops) {
                if (Math.random() < drop.chance) {
                    const item = wbManager.getItem(drop.itemId);
                    if (!item) continue;
                    if (drop.itemId === 'gold_coin') {
                        goldGained += drop.quantity;
                    } else {
                        wbManager.addItemToInventory(userId, drop.itemId, drop.quantity);
                    }
                    lootLog.push(`  + ${drop.quantity} ${item.name}`);
                }
            }
            
            // Update statistics
            wbManager.updateStatistic(userId, 'monstersKilled');
            if (monster.type === 'boss' || monster.type === 'world_boss') {
                wbManager.updateStatistic(userId, 'bossesKilled');
            }
            
            let levelUpMessage = '';
            if (newLevel > oldLevel) {
                const newStats = calculateStatsForLevel(newLevel);
                const hpIncrease = newStats.maxHp - wbUser.maxHp;
                const mpIncrease = newStats.maxMp - wbUser.maxMp;
                levelUpMessage = `\nüéä **LEVEL UP!** Level ${oldLevel} ‚Üí Level ${newLevel}\nüìà **TƒÉng th·ªÉ l·ª±c:** +${hpIncrease} HP, +${mpIncrease} MP, +${newStats.baseAttack - wbUser.baseAttack} ATK, +${newStats.baseDefense - wbUser.baseDefense} DEF`;
                
                wbManager.updateUser(userId, {
                    level: newLevel,
                    xp: newXP,
                    maxHp: newStats.maxHp,
                    maxMp: newStats.maxMp,
                    hp: newStats.maxHp,
                    mp: newStats.maxMp,
                    baseAttack: newStats.baseAttack,
                    baseDefense: newStats.baseDefense,
                    combatState: resetCombatState()
                });
            } else {
                wbManager.updateUser(userId, {
                    xp: newXP,
                    hp: currentPlayerHp,
                    combatState: resetCombatState()
                });
            }
            
            if (goldGained > 0) {
                userManager.updateMoney(userId, goldGained);
            }
            
            combatLog.push('');
            combatLog.push(`üéâ **CHI·∫æN TH·∫ÆNG!** üéâ`);
            combatLog.push(`ƒê√£ h·∫° g·ª•c ${monster.name} sau ${turnCount} l∆∞·ª£t!`);
            combatLog.push(`‚≠ê **Nh·∫≠n ƒë∆∞·ª£c:** ${xpGained} XP${goldGained > 0 ? ` v√† ${goldGained} xu` : ''}`);
            combatLog.push(`üéÅ **V·∫≠t ph·∫©m r∆°i:**\n${lootLog.length > 0 ? lootLog.join('\n') : 'Kh√¥ng c√≥ g√¨ c·∫£.'}`);
            if (levelUpMessage) combatLog.push(levelUpMessage);
            
            return combatLog.join('\n');
        }
        
        // Monster turn
        let monsterDamage = Math.max(1, (wbUser.combatState.monsterBuffedAttack || monster.attack) - stats.defense);
        currentPlayerHp -= monsterDamage;
        combatLog.push(`   ü©∏ Monster t·∫•n c√¥ng: ${monsterDamage} s√°t th∆∞∆°ng. Your HP: ${Math.max(0, currentPlayerHp)}/${wbUser.maxHp + stats.hpBonus}`);
        
        // Check if player is defeated
        if (currentPlayerHp <= 0) {
            // Check for revival stone
            const now = Date.now();
            const revivalCooldown = 60000;
            
            if (wbManager.hasItem(userId, 'revival_stone') && 
                (!wbUser.lastRevivalUse || now - wbUser.lastRevivalUse >= revivalCooldown)) {
                
                wbManager.removeItemFromInventory(userId, 'revival_stone', 1);
                const reviveHp = Math.floor(wbUser.maxHp * 0.5);
                currentPlayerHp = reviveHp;
                
                wbManager.updateUser(userId, {
                    hp: reviveHp,
                    lastRevivalUse: now
                });
                
                combatLog.push(`üíé **ƒê√Å H·ªíI SINH K√çCH HO·∫†T!** H·ªìi sinh v·ªõi ${reviveHp} HP!`);
            } else {
                // Player died
                const xpLost = Math.min(Math.floor(wbUser.xp * 0.1), 50);
                const newXP = Math.max(0, wbUser.xp - xpLost);
                const newLevel = calculateLevelFromXP(newXP);
                
                let levelDownMessage = '';
                if (newLevel < wbUser.level) {
                    const newStats = calculateStatsForLevel(newLevel);
                    levelDownMessage = `\nüìâ **Xu·ªëng c·∫•p:** Level ${wbUser.level} ‚Üí Level ${newLevel}`;
                    
                    wbManager.updateUser(userId, {
                        level: newLevel,
                        xp: newXP,
                        maxHp: newStats.maxHp,
                        maxMp: newStats.maxMp,
                        hp: 1,
                        mp: newStats.maxMp,
                        baseAttack: newStats.baseAttack,
                        baseDefense: newStats.baseDefense,
                        combatState: resetCombatState()
                    });
                } else {
                    wbManager.updateUser(userId, {
                        xp: newXP,
                        hp: 1,
                        combatState: resetCombatState()
                    });
                }
                
                combatLog.push('');
                combatLog.push(`‚ò†Ô∏è **TH·∫§T B·∫†I!** ‚ò†Ô∏è`);
                combatLog.push(`B·∫°n ƒë√£ b·ªã ${monster.name} h·∫° g·ª•c sau ${turnCount} l∆∞·ª£t.`);
                combatLog.push(`- B·∫°n b·ªã m·∫•t ${xpLost} XP.`);
                combatLog.push(`- B·∫°n ƒë√£ ƒë∆∞·ª£c h·ªìi sinh t·∫°i th√†nh v·ªõi 1 HP.${levelDownMessage}`);
                
                return combatLog.join('\n');
            }
        }
        // Safe mode HP check
        if (safeMode) {
            const hpPercentage = currentPlayerHp / wbUser.maxHp;
            if (hpPercentage < 0.7) {
                wbManager.updateUser(userId, {
                    hp: currentPlayerHp,
                    mp: currentMp,
                    skillCooldowns,
                    combatState: {
                        ...wbUser.combatState,
                        monsterHp: currentMonsterHp
                    }
                });
                combatLog.push('');
                combatLog.push(`üõ°Ô∏è **SAFE MODE ACTIVATED!**`);
                combatLog.push(`HP xu·ªëng d∆∞·ªõi 70% (${currentPlayerHp}/${wbUser.maxHp}). T·∫°m d·ª´ng ƒë·ªÉ b·∫°n d√πng thu·ªëc!`);
                combatLog.push(`Monster c√≤n ${currentMonsterHp}/${monster.hp} HP.`);
                combatLog.push('');
                combatLog.push('**Ti·∫øp t·ª•c:** `wb pve` | `wb pve auto` | `wb pve safe`');
                combatLog.push('**D√πng thu·ªëc:** `wb use health_potion`');
                return combatLog.join('\n');
            }
        }
        // Gi·∫£m cooldown skill
        for (const skillId of equippedSkills) {
            if (skillCooldowns[skillId] > 0) skillCooldowns[skillId]--;
        }
        // Decrease buff turns
        wbManager.decreaseBuffTurns(userId);
        combatLog.push('');
    }
    // Timeout
    if (turnCount >= maxTurns) {
        wbManager.updateUser(userId, {
            hp: currentPlayerHp,
            mp: currentMp,
            skillCooldowns,
            combatState: {
                ...wbUser.combatState,
                monsterHp: currentMonsterHp
            }
        });
        combatLog.push(`‚è∞ **TIMEOUT!** Tr·∫≠n ƒë·∫•u qu√° d√†i (${maxTurns} l∆∞·ª£t). T·∫°m d·ª´ng ƒë·ªÉ ngh·ªâ ng∆°i.`);
    }
    return combatLog.join('\n');
}

async function handleInventory({ userId }) {
    const wbUser = wbManager.getUser(userId);

    if (wbUser.inventory.length === 0) {
        return "üéí T√∫i ƒë·ªì c·ªßa b·∫°n tr·ªëng r·ªóng.";
    }

    const inventoryByType = {};
    
    for (const itemStack of wbUser.inventory) {
        const itemDetails = wbManager.getItem(itemStack.itemId);
        if (!itemDetails) continue;
        
        const type = itemDetails.type || 'other';
        if (!inventoryByType[type]) inventoryByType[type] = [];
        
        inventoryByType[type].push({
            ...itemStack,
            item: itemDetails
        });
    }
    
    let inventoryText = '--- üéí **T√öI ƒê·ªí C·ª¶A B·∫†N** ---\n';
    
    const typeNames = {
        weapon: '‚öîÔ∏è **V≈© kh√≠:**',
        armor: 'üõ°Ô∏è **Gi√°p:**', 
        consumable: 'üß™ **Thu·ªëc:**',
        material: 'üì¶ **Nguy√™n li·ªáu:**',
        special: '‚ú® **ƒê·∫∑c bi·ªát:**',
        other: 'üìã **Kh√°c:**'
    };
    
    for (const [type, items] of Object.entries(inventoryByType)) {
        inventoryText += `\n${typeNames[type] || 'üìã **Kh√°c:**'}\n`;
        for (const itemStack of items) {
            const sellPrice = itemStack.item.sellPrice ? ` (${itemStack.item.sellPrice} xu)` : '';
            inventoryText += ` ‚Ä¢ [${itemStack.item.id}] **${itemStack.item.name}** x${itemStack.quantity}${sellPrice}\n   *${itemStack.item.description}*\n`;
        }
    }

    return inventoryText;
}

async function handleEquipment({ userId, args }) {
    const wbUser = wbManager.getUser(userId);
    
    if (args.length < 2) {
        // Show current equipment if no action specified
    }
    
    const action = args[1]?.toLowerCase();
    
    if (!action) {
        const weapon = wbUser.equipment.weapon ? wbManager.getItem(wbUser.equipment.weapon) : null;
        const armor = wbUser.equipment.armor ? wbManager.getItem(wbUser.equipment.armor) : null;
        
        return `--- üéΩ **TRANG B·ªä HI·ªÜN T·∫†I** ---
‚öîÔ∏è **V≈© kh√≠:** ${weapon ? `${weapon.name} (+${weapon.attackBonus} ATK)` : 'Kh√¥ng c√≥'}
üõ°Ô∏è **Gi√°p:** ${armor ? `${armor.name} (+${armor.defenseBonus} DEF, +${armor.hpBonus || 0} HP)` : 'Kh√¥ng c√≥'}

**L·ªánh c√≥ s·∫µn:**
\`wb equip wear <item_id>\` - Trang b·ªã v·∫≠t ph·∫©m
\`wb equip remove <weapon|armor>\` - G·ª° trang b·ªã`;
    }
    
    if (action === 'wear' || action === 'equip') {
        if (args.length < 3) {
            return '‚ùå **Thi·∫øu tham s·ªë!** S·ª≠ d·ª•ng: `wb equip wear <item_id>`';
        }
        
        const itemId = args[2];
        if (!itemId) return '‚ùå Vui l√≤ng ch·ªâ ƒë·ªãnh ID v·∫≠t ph·∫©m ƒë·ªÉ trang b·ªã.';
        
        const result = wbManager.equipItem(userId, itemId);
        return result.success ? `‚úÖ ${result.message}` : `‚ùå ${result.message}`;
    }
    
    if (action === 'remove' || action === 'unequip') {
        if (args.length < 3) {
            return '‚ùå **Thi·∫øu tham s·ªë!** S·ª≠ d·ª•ng: `wb equip remove <weapon|armor>`';
        }
        
        const slot = args[2]?.toLowerCase();
        if (!slot || (slot !== 'weapon' && slot !== 'armor')) {
            return '‚ùå Vui l√≤ng ch·ªâ ƒë·ªãnh: weapon ho·∫∑c armor';
        }
        
        const result = wbManager.unequipItem(userId, slot);
        return result.success ? `‚úÖ ${result.message}` : `‚ùå ${result.message}`;
    }
    
    return '‚ùå L·ªánh kh√¥ng h·ª£p l·ªá. D√πng: wear, remove';
}

async function handleShop({ userId, args }) {
    const action = args[1]?.toLowerCase();
    
    if (!action || action === 'list') {
        const items = Object.values(wbManager.items).filter(item => item.buyPrice);
        const skills = wbManager.getAllSkills().filter(skill => skill.buyPrice);
        
        const itemsByType = {};
        for (const item of items) {
            const type = item.type || 'other';
            if (!itemsByType[type]) itemsByType[type] = [];
            itemsByType[type].push(item);
        }
        let shopText = '--- üè™ **C·ª¨A H√ÄNG WORLD BOSS** ---\n';
        const typeNames = {
            weapon: '‚öîÔ∏è **V≈© kh√≠:**',
            armor: 'üõ°Ô∏è **Gi√°p:**',
            consumable: 'üß™ **Thu·ªëc:**',
            special: '‚ú® **ƒê·∫∑c bi·ªát:**',
            skill: 'üßô‚Äç‚ôÇÔ∏è **K·ªπ nƒÉng:**'
        };
        for (const [type, items] of Object.entries(itemsByType)) {
            if (type === 'material') continue; // Don't show materials in shop
            shopText += `\n${typeNames[type] || 'üìã **Kh√°c:**'}\n`;
            for (const item of items) {
                const levelReq = item.requiredLevel ? ` (Lv.${item.requiredLevel})` : '';
                shopText += ` ‚Ä¢ \`${item.id}\`: **${item.name}** - ${item.buyPrice} xu${levelReq}\n`;
            }
        }
        // Hi·ªÉn th·ªã skill
        if (skills.length > 0) {
            shopText += `\n${typeNames.skill}\n`;
            for (const skill of skills) {
                shopText += ` ‚Ä¢ \`${skill.id}\`: **${skill.name}** - ${skill.buyPrice} xu (MP: ${skill.mp_cost}, CD: ${skill.cooldown})\n   *${skill.description}*\n`;
            }
        }
        shopText += '\n**L·ªánh:** `wb shop buy <item_id|skill_id> [s·ªë l∆∞·ª£ng]` | `wb shop sell <item_id> [s·ªë l∆∞·ª£ng]`';
        return shopText;
    }
    if (action === 'buy') {
        if (args.length < 3) {
            return '‚ùå **Thi·∫øu tham s·ªë!** S·ª≠ d·ª•ng: `wb shop buy <item_id|skill_id> [s·ªë_l∆∞·ª£ng]`';
        }
        const id = args[2];
        const quantity = parseInt(args[3]) || 1;
        if (!id) return '‚ùå Vui l√≤ng ch·ªâ ƒë·ªãnh ID v·∫≠t ph·∫©m ho·∫∑c k·ªπ nƒÉng.';
        // ∆Øu ti√™n item
        let item = wbManager.getItem(id);
        if (item && item.buyPrice) {
            const wbUser = wbManager.getUser(userId);
            const generalUser = userManager.getUser(userId);
            if (item.requiredLevel && wbUser.level < item.requiredLevel) {
                return `‚ùå B·∫°n c·∫ßn ƒë·∫°t Level ${item.requiredLevel} ƒë·ªÉ mua ${item.name}.`;
            }
            const totalCost = item.buyPrice * quantity;
            if (generalUser.money < totalCost) {
                return `‚ùå Kh√¥ng ƒë·ªß ti·ªÅn! C·∫ßn ${totalCost} xu ƒë·ªÉ mua ${quantity} ${item.name}.`;
            }
            userManager.updateMoney(userId, -totalCost);
            wbManager.addItemToInventory(userId, id, quantity);
            return `‚úÖ ƒê√£ mua ${quantity} **${item.name}** v·ªõi gi√° ${totalCost} xu.`;
        }
        // N·∫øu kh√¥ng ph·∫£i item, ki·ªÉm tra skill
        const skill = wbManager.getSkill(id);
        if (skill && skill.buyPrice) {
            const generalUser = userManager.getUser(userId);
            if (generalUser.money < skill.buyPrice) {
                return `‚ùå Kh√¥ng ƒë·ªß ti·ªÅn! C·∫ßn ${skill.buyPrice} xu ƒë·ªÉ mua k·ªπ nƒÉng ${skill.name}.`;
            }
            if (wbManager.getUser(userId).skills?.includes(id)) {
                return '‚ùå B·∫°n ƒë√£ s·ªü h·ªØu k·ªπ nƒÉng n√†y.';
            }
            userManager.updateMoney(userId, -skill.buyPrice);
            wbManager.addSkillToUser(userId, id);
            return `‚úÖ ƒê√£ mua k·ªπ nƒÉng **${skill.name}** v·ªõi gi√° ${skill.buyPrice} xu.`;
        }
        return '‚ùå V·∫≠t ph·∫©m ho·∫∑c k·ªπ nƒÉng n√†y kh√¥ng c√≥ b√°n trong c·ª≠a h√†ng.';
    }
    
    if (action === 'sell') {
        if (args.length < 3) {
            return '‚ùå **Thi·∫øu tham s·ªë!** S·ª≠ d·ª•ng: `wb shop sell <item_id> [s·ªë_l∆∞·ª£ng]`';
        }
        
        const itemId = args[2];
        const quantity = parseInt(args[3]) || 1;
        
        if (!itemId) return '‚ùå Vui l√≤ng ch·ªâ ƒë·ªãnh ID v·∫≠t ph·∫©m.';
        
        const item = wbManager.getItem(itemId);
        if (!item || !item.sellPrice) {
            return '‚ùå V·∫≠t ph·∫©m n√†y kh√¥ng th·ªÉ b√°n.';
        }
        
        if (!wbManager.hasItem(userId, itemId, quantity)) {
            return `‚ùå B·∫°n kh√¥ng c√≥ ƒë·ªß ${quantity} ${item.name}.`;
        }
        
        const totalEarned = item.sellPrice * quantity;
        wbManager.removeItemFromInventory(userId, itemId, quantity);
        userManager.updateMoney(userId, totalEarned);
        
        return `‚úÖ ƒê√£ b√°n ${quantity} **${item.name}** v√† nh·∫≠n ${totalEarned} xu.`;
    }
    
    return '‚ùå L·ªánh kh√¥ng h·ª£p l·ªá. D√πng: list, buy, sell';
}

async function handleUse({ userId, args }) {
    if (args.length < 2) {
        return '‚ùå **Thi·∫øu tham s·ªë!** S·ª≠ d·ª•ng: `wb use <item_id>`';
    }
    
    const itemId = args[1];
    if (!itemId) return '‚ùå Vui l√≤ng ch·ªâ ƒë·ªãnh ID v·∫≠t ph·∫©m ƒë·ªÉ s·ª≠ d·ª•ng.';
    
    const item = wbManager.getItem(itemId);
    if (!item || item.type !== 'consumable') {
        return '‚ùå V·∫≠t ph·∫©m n√†y kh√¥ng th·ªÉ s·ª≠ d·ª•ng.';
    }
    
    if (!wbManager.hasItem(userId, itemId)) {
        return `‚ùå B·∫°n kh√¥ng c√≥ ${item.name}.`;
    }
    
    const wbUser = wbManager.getUser(userId);
    let message = '';
    
    // Health potion
    if (item.healAmount) {
        const stats = wbManager.getEquippedStats(userId);
        const maxHp = wbUser.maxHp + stats.hpBonus;
        const healedAmount = Math.min(item.healAmount, maxHp - wbUser.hp);
        
        if (healedAmount <= 0) {
            return '‚ùå HP c·ªßa b·∫°n ƒë√£ ƒë·∫ßy!';
        }
        
        wbManager.updateUser(userId, { hp: wbUser.hp + healedAmount });
        message = `‚úÖ ƒê√£ h·ªìi ${healedAmount} HP! (${wbUser.hp + healedAmount}/${maxHp})`;
    }
    
    // Mana potion
    if (item.manaAmount) {
        const healedMp = Math.min(item.manaAmount, wbUser.maxMp - wbUser.mp);
        
        if (healedMp <= 0) {
            return '‚ùå MP c·ªßa b·∫°n ƒë√£ ƒë·∫ßy!';
        }
        
        wbManager.updateUser(userId, { mp: wbUser.mp + healedMp });
        message = `‚úÖ ƒê√£ h·ªìi ${healedMp} MP! (${wbUser.mp + healedMp}/${wbUser.maxMp})`;
    }
    
    // Buff items
    if (item.buffType) {
        wbManager.addBuff(userId, item.buffType, item.buffAmount, item.duration);
        const buffName = item.buffType === 'attack' ? 'T·∫•n c√¥ng' : item.buffType === 'defense' ? 'Ph√≤ng th·ªß' : 'May m·∫Øn';
        message = `‚úÖ ƒê√£ s·ª≠ d·ª•ng ${item.name}! +${Math.round(item.buffAmount * 100)}% ${buffName} trong ${item.duration} l∆∞·ª£t chi·∫øn ƒë·∫•u.`;
    }
    
    // XP gem
    if (item.xpBonus) {
        const adjustedXpBonus = Math.floor(item.xpBonus * XP_MULTIPLIER);
        const newXP = wbUser.xp + adjustedXpBonus;
        const oldLevel = wbUser.level;
        const newLevel = calculateLevelFromXP(newXP);
        
        message = `‚úÖ ƒê√£ nh·∫≠n ${adjustedXpBonus} XP!`;
        
        if (newLevel > oldLevel) {
            const newStats = calculateStatsForLevel(newLevel);
            const hpIncrease = newStats.maxHp - wbUser.maxHp;
            const mpIncrease = newStats.maxMp - wbUser.maxMp;
            const atkIncrease = newStats.baseAttack - wbUser.baseAttack;
            const defIncrease = newStats.baseDefense - wbUser.baseDefense;
            
            // Full update with stat increases and heal like combat level up
            wbManager.updateUser(userId, {
                xp: newXP,
                level: newLevel,
                maxHp: newStats.maxHp,
                maxMp: newStats.maxMp,
                hp: newStats.maxHp, // Full heal on level up
                mp: newStats.maxMp,  // Full MP restore
                baseAttack: newStats.baseAttack,
                baseDefense: newStats.baseDefense
            });
            
            message += ` üéä **LEVEL UP!** Level ${oldLevel} ‚Üí Level ${newLevel}
üìà **TƒÉng th·ªÉ l·ª±c:** +${hpIncrease} HP, +${mpIncrease} MP, +${atkIncrease} ATK, +${defIncrease} DEF
üíö **Full heal!** HP v√† MP ƒë√£ ƒë∆∞·ª£c h·ªìi ƒë·∫ßy!`;
            
            // Check for max level
            if (newLevel >= MAX_LEVEL) {
                const overflow = getXPOverflow(newXP, newLevel);
                message += `\nüåü **ƒê√É ƒê·∫†T LEVEL T·ªêI ƒêA!** (${overflow} XP th·ª´a s·∫Ω ƒë∆∞·ª£c l∆∞u)`;
            }
        } else {
            wbManager.updateUser(userId, { xp: newXP });
        }
    }
    
    // Remove item from inventory
    wbManager.removeItemFromInventory(userId, itemId, 1);
    
    return message || `‚úÖ ƒê√£ s·ª≠ d·ª•ng ${item.name}.`;
}

async function handleQuests({ userId }) {
    const hasReset = wbManager.checkDailyReset(userId);
    const wbUser = wbManager.getUser(userId);
    const quests = wbUser.dailyQuests.available;
    
    let resetMessage = hasReset ? 'üîÑ **Daily quests ƒë√£ ƒë∆∞·ª£c reset!**\n\n' : '';
    
    let questText = '--- üìã **NHI·ªÜM V·ª§ H√ÄNG NG√ÄY** ---\n';
    
    for (const quest of quests) {
        const progress = `${quest.progress}/${quest.count}`;
        const status = quest.completed ? '‚úÖ' : 'üîÑ';
        const reward = `${quest.reward.xp} XP + ${quest.reward.gold} xu`;
        
        questText += `${status} **${quest.description}** (${progress})\n   Th∆∞·ªüng: ${reward}\n\n`;
    }
    
    const completedCount = quests.filter(q => q.completed).length;
    questText += `**Ho√†n th√†nh:** ${completedCount}/${quests.length}`;
    
    if (completedCount > 0 && !wbUser.dailyQuests.completed.includes(new Date().toDateString())) {
        questText += '\n\nüí° D√πng \`wb quest claim\` ƒë·ªÉ nh·∫≠n th∆∞·ªüng!';
    }
    
    return resetMessage + questText;
}

async function handleQuestClaim({ userId }) {
    const wbUser = wbManager.getUser(userId);
    const today = new Date().toDateString();
    
    if (wbUser.dailyQuests.completed.includes(today)) {
        return '‚ùå B·∫°n ƒë√£ nh·∫≠n th∆∞·ªüng quest h√¥m nay r·ªìi!';
    }
    
    const completedQuests = wbUser.dailyQuests.available.filter(q => q.completed);
    if (completedQuests.length === 0) {
        return '‚ùå B·∫°n ch∆∞a ho√†n th√†nh quest n√†o!';
    }
    
    let totalXP = 0;
    let totalGold = 0;
    
    for (const quest of completedQuests) {
        totalXP += quest.reward.xp;
        totalGold += quest.reward.gold;
    }
    
    // Add rewards
    wbManager.updateUser(userId, { xp: wbUser.xp + totalXP });
    userManager.updateMoney(userId, totalGold);
    
    // Mark as claimed
    wbUser.dailyQuests.completed.push(today);
    wbManager.updateStatistic(userId, 'questsCompleted', completedQuests.length);
    wbManager.saveUsers();
    
    return `üéâ **NH·∫¨N TH∆Ø·ªûNG TH√ÄNH C√îNG!**
ƒê√£ ho√†n th√†nh ${completedQuests.length} quest v√† nh·∫≠n ƒë∆∞·ª£c:
‚≠ê ${totalXP} XP
üí∞ ${totalGold} xu`;
}

async function handleStats({ userId }) {
    const wbUser = wbManager.getUser(userId);
    const stats = wbUser.statistics;
    
    return `--- üìä **TH·ªêNG K√ä C·ª¶A B·∫†N** ---
‚öîÔ∏è **Qu√°i v·∫≠t ƒë√£ ti√™u di·ªát:** ${stats.monstersKilled}
üëë **Boss ƒë√£ h·∫° g·ª•c:** ${stats.bossesKilled}
üéÅ **V·∫≠t ph·∫©m ƒë√£ t√¨m th·∫•y:** ${stats.itemsFound}
üìã **Quest ƒë√£ ho√†n th√†nh:** ${stats.questsCompleted}

üèÜ **Th√†nh t√≠ch:**
${stats.bossesKilled >= 10 ? 'üëë **Boss Slayer** - H·∫° g·ª•c 10+ boss' : ''}
${stats.monstersKilled >= 100 ? '‚öîÔ∏è **Monster Hunter** - Ti√™u di·ªát 100+ qu√°i v·∫≠t' : ''}
${stats.questsCompleted >= 50 ? 'üìã **Quest Master** - Ho√†n th√†nh 50+ quest' : ''}`;
}

async function handleRest({ userId }) {
    const wbUser = wbManager.getUser(userId);
    
    if (wbUser.combatState.inCombat) {
        return '‚ùå Kh√¥ng th·ªÉ ngh·ªâ ng∆°i khi ƒëang trong tr·∫≠n chi·∫øn!';
    }
    
    const stats = wbManager.getEquippedStats(userId);
    const maxHp = wbUser.maxHp + stats.hpBonus;
    
    if (wbUser.hp >= maxHp) {
        return '‚ùå HP c·ªßa b·∫°n ƒë√£ ƒë·∫ßy r·ªìi!';
    }
    
    // Check rest cooldown (5 minutes)
    const now = Date.now();
    const restCooldown = 5 * 60 * 1000; // 5 minutes
    
    if (wbUser.lastRestTime && now - wbUser.lastRestTime < restCooldown) {
        const remainingMs = restCooldown - (now - wbUser.lastRestTime);
        const remainingMin = Math.ceil(remainingMs / 60000);
        return `‚è∞ B·∫°n c·∫ßn ch·ªù ${remainingMin} ph√∫t n·ªØa ƒë·ªÉ ngh·ªâ ng∆°i l·∫°i.`;
    }
    
    // Rest healing: 25% of max HP
    const healAmount = Math.floor(maxHp * 0.25);
    const newHp = Math.min(maxHp, wbUser.hp + healAmount);
    const actualHeal = newHp - wbUser.hp;
    
    wbManager.updateUser(userId, {
        hp: newHp,
        lastRestTime: now
    });
    
    return `üí§ **NGH·ªà NG∆†I** üí§
B·∫°n ƒë√£ ngh·ªâ ng∆°i v√† h·ªìi ph·ª•c s·ª©c l·ª±c.
üíö **H·ªìi HP:** +${actualHeal} HP (${newHp}/${maxHp})

‚è∞ C√≥ th·ªÉ ngh·ªâ ng∆°i l·∫°i sau 5 ph√∫t.`;
}

async function handlePvp({ userId, args }) {
  const subcommand = args[1]?.toLowerCase();
  
  if (!subcommand) {
    const wbUser = wbManager.getUser(userId);
    const stats = wbUser.pvp || { wins: 0, losses: 0, totalFights: 0 };
    
    let statusText = '';
    if (wbUser.pvp?.challenges?.received) {
      const challenge = wbUser.pvp.challenges.received;
      const timeLeft = Math.max(0, 60 - Math.floor((Date.now() - challenge.timestamp) / 1000));
      if (timeLeft > 0) {
        statusText = `\nüîî **Th√°ch ƒë·∫•u t·ª´ ${challenge.from}** (${timeLeft}s c√≤n l·∫°i)\n   D√πng \`wb pvp ac\` ƒë·ªÉ ch·∫•p nh·∫≠n!`;
      }
    }
    
    if (wbUser.pvp?.challenges?.sent) {
      const challenge = wbUser.pvp.challenges.sent;
      const timeLeft = Math.max(0, 60 - Math.floor((Date.now() - challenge.timestamp) / 1000));
      if (timeLeft > 0) {
        statusText = `\n‚è≥ **ƒêang ch·ªù ${challenge.to} ph·∫£n h·ªìi** (${timeLeft}s c√≤n l·∫°i)`;
      }
    }
    
    if (wbUser.pvp?.inPvP) {
      statusText = `\n‚öîÔ∏è **ƒêang trong tr·∫≠n PvP v·ªõi ${wbUser.pvp.opponent}**\n   Tr·∫≠n ƒë·∫•u ƒëang di·ªÖn ra t·ª± ƒë·ªông!`;
    }
    
    return `--- ‚öîÔ∏è **PVP SYSTEM** ---
ÔøΩÔøΩ **Stats:** ${stats.wins}W/${stats.losses}L (${stats.totalFights} fights)${statusText}

**Commands:**
\`wb pvp <userId>\` - Th√°ch ƒë·∫•u ng∆∞·ªùi ch∆°i
\`wb pvp ac\` - Ch·∫•p nh·∫≠n th√°ch ƒë·∫•u (auto combat)
\`wb pvp decline\` - T·ª´ ch·ªëi th√°ch ƒë·∫•u
\`wb pvp cancel\` - H·ªßy th√°ch ƒë·∫•u ƒë√£ g·ª≠i`;
  }
  
  // Accept challenge
  if (subcommand === 'ac' || subcommand === 'accept') {
    return await handlePvpAccept(userId);
  }
  
  // Decline challenge
  if (subcommand === 'decline' || subcommand === 'reject') {
    return await handlePvpDecline(userId);
  }
  
  // Cancel sent challenge
  if (subcommand === 'cancel') {
    return await handlePvpCancel(userId);
  }
  
  // No manual attack needed - PvP is auto combat
  
  // Challenge someone
  const targetId = subcommand;
  return await handlePvpChallenge(userId, targetId);
}

async function handlePvpChallenge(challengerId, targetId) {
  // Validate basic conditions
  if (!targetId) return '‚ùå **Thi·∫øu tham s·ªë!** S·ª≠ d·ª•ng: `wb pvp <userId>`';
  
  const challenger = wbManager.getUser(challengerId);
  const target = userManager.getUser(targetId); // Check if user exists in general system
  
  if (!target) return '‚ùå Ng∆∞·ªùi ch∆°i kh√¥ng t·ªìn t·∫°i!';
  if (targetId === challengerId) return '‚ùå Kh√¥ng th·ªÉ th√°ch ƒë·∫•u ch√≠nh m√¨nh!';
  
  // Initialize PvP data if not exists
  if (!challenger.pvp) {
    challenger.pvp = {
      challenges: { sent: null, received: null },
      inPvP: false,
      opponent: null,
      stats: { wins: 0, losses: 0, totalFights: 0 }
    };
  }
  
  const targetWbUser = wbManager.getUser(targetId);
  if (!targetWbUser.pvp) {
    targetWbUser.pvp = {
      challenges: { sent: null, received: null },
      inPvP: false,
      opponent: null,
      stats: { wins: 0, losses: 0, totalFights: 0 }
    };
  }
  
  // Check combat states
  if (challenger.combatState.inCombat) return '‚ùå B·∫°n ƒëang trong tr·∫≠n chi·∫øn PvE!';
  if (targetWbUser.combatState.inCombat) return '‚ùå ƒê·ªëi th·ªß ƒëang b·∫≠n chi·∫øn ƒë·∫•u PvE!';
  if (challenger.pvp.inPvP) return '‚ùå B·∫°n ƒëang trong tr·∫≠n PvP!';
  if (targetWbUser.pvp.inPvP) return '‚ùå ƒê·ªëi th·ªß ƒëang trong tr·∫≠n PvP kh√°c!';
  
  // Check existing challenges
  if (challenger.pvp.challenges.sent) {
    const timeLeft = Math.max(0, 60 - Math.floor((Date.now() - challenger.pvp.challenges.sent.timestamp) / 1000));
    if (timeLeft > 0) {
      return `‚ùå B·∫°n ƒë√£ g·ª≠i th√°ch ƒë·∫•u r·ªìi! C√≤n ${timeLeft}s. D√πng \`wb pvp cancel\` ƒë·ªÉ h·ªßy.`;
    } else {
      // Clean up expired challenge
      challenger.pvp.challenges.sent = null;
    }
  }
  
  if (targetWbUser.pvp.challenges.received) {
    const timeLeft = Math.max(0, 60 - Math.floor((Date.now() - targetWbUser.pvp.challenges.received.timestamp) / 1000));
    if (timeLeft > 0) {
      return '‚ùå ƒê·ªëi th·ªß ƒëang c√≥ th√°ch ƒë·∫•u kh√°c ch·ªù x·ª≠ l√Ω!';
    } else {
      // Clean up expired challenge
      targetWbUser.pvp.challenges.received = null;
    }
  }
  
  // Level difference check
  const levelDiff = Math.abs(challenger.level - targetWbUser.level);
  if (levelDiff > 10) {
    return `‚ùå Ch√™nh l·ªách level qu√° l·ªõn! (${levelDiff} levels, t·ªëi ƒëa 10)`;
  }
  
  // Send challenge
  const timestamp = Date.now();
  challenger.pvp.challenges.sent = { to: targetId, timestamp };
  targetWbUser.pvp.challenges.received = { from: challengerId, timestamp };
  
  wbManager.saveUsers();
  
  return `‚öîÔ∏è **TH√ÅCH ƒê·∫§U ƒê√É G·ª¨I!**
ƒê√£ th√°ch ƒë·∫•u **${targetId}** (Lv.${targetWbUser.level})
‚è∞ Th·ªùi h·∫°n: 60 gi√¢y

ƒê·ªëi th·ªß s·∫Ω nh·∫≠n ƒë∆∞·ª£c th√¥ng b√°o khi d√πng l·ªánh wb.`;
}

async function handlePvpAccept(userId) {
  const user = wbManager.getUser(userId);
  
  if (!user.pvp) {
    user.pvp = {
      challenges: { sent: null, received: null },
      inPvP: false,
      opponent: null,
      stats: { wins: 0, losses: 0, totalFights: 0 }
    };
  }
  
  const challenge = user.pvp.challenges.received;
  
  if (!challenge) {
    return '‚ùå B·∫°n kh√¥ng c√≥ th√°ch ƒë·∫•u n√†o!';
  }
  
  // Check timeout (1 minute = 60000ms)
  const timeLeft = Math.max(0, 60 - Math.floor((Date.now() - challenge.timestamp) / 1000));
  if (timeLeft <= 0) {
    user.pvp.challenges.received = null;
    wbManager.saveUsers();
    return '‚è∞ Th√°ch ƒë·∫•u ƒë√£ h·∫øt h·∫°n!';
  }
  
  const challenger = wbManager.getUser(challenge.from);
  if (!challenger.pvp?.challenges?.sent || challenger.pvp.challenges.sent.to !== userId) {
    user.pvp.challenges.received = null;
    wbManager.saveUsers();
    return '‚ùå Th√°ch ƒë·∫•u ƒë√£ ƒë∆∞·ª£c h·ªßy!';
  }
  
  // Start PvP
  return await startPvPCombat(challenge.from, userId);
}

async function handlePvpDecline(userId) {
  const user = wbManager.getUser(userId);
  
  if (!user.pvp?.challenges?.received) {
    return '‚ùå B·∫°n kh√¥ng c√≥ th√°ch ƒë·∫•u n√†o ƒë·ªÉ t·ª´ ch·ªëi!';
  }
  
  const challengerId = user.pvp.challenges.received.from;
  const challenger = wbManager.getUser(challengerId);
  
  // Clean up challenges
  user.pvp.challenges.received = null;
  if (challenger.pvp?.challenges?.sent) {
    challenger.pvp.challenges.sent = null;
  }
  
  wbManager.saveUsers();
  
  return `‚ùå **ƒê√É T·ª™ CH·ªêI TH√ÅCH ƒê·∫§U**
B·∫°n ƒë√£ t·ª´ ch·ªëi th√°ch ƒë·∫•u t·ª´ **${challengerId}**.`;
}

async function handlePvpCancel(userId) {
  const user = wbManager.getUser(userId);
  
  if (!user.pvp?.challenges?.sent) {
    return '‚ùå B·∫°n kh√¥ng c√≥ th√°ch ƒë·∫•u n√†o ƒë·ªÉ h·ªßy!';
  }
  
  const targetId = user.pvp.challenges.sent.to;
  const target = wbManager.getUser(targetId);
  
  // Clean up challenges
  user.pvp.challenges.sent = null;
  if (target.pvp?.challenges?.received) {
    target.pvp.challenges.received = null;
  }
  
  wbManager.saveUsers();
  
  return `üö´ **ƒê√É H·ª¶Y TH√ÅCH ƒê·∫§U**
ƒê√£ h·ªßy th√°ch ƒë·∫•u g·ª≠i t·ªõi **${targetId}**.`;
}

async function startPvPCombat(player1Id, player2Id) {
  const player1 = wbManager.getUser(player1Id);
  const player2 = wbManager.getUser(player2Id);
  
  // Clean up challenges
  player1.pvp.challenges.sent = null;
  player2.pvp.challenges.received = null;
  
  // Reset HP v·ªÅ ban ƒë·∫ßu cho fair fight
  const stats1 = wbManager.getEquippedStats(player1Id);
  const stats2 = wbManager.getEquippedStats(player2Id);
  
  const maxHp1 = player1.maxHp + stats1.hpBonus;
  const maxHp2 = player2.maxHp + stats2.hpBonus;
  
  // Set PvP state v√† reset HP
  player1.pvp.inPvP = true;
  player1.pvp.opponent = player2Id;
  player1.pvp.currentHp = maxHp1;
  player1.hp = maxHp1; // Reset HP in main stats too
  
  player2.pvp.inPvP = true;
  player2.pvp.opponent = player1Id;
  player2.pvp.currentHp = maxHp2;
  player2.hp = maxHp2; // Reset HP in main stats too
  
  wbManager.saveUsers();
  
  // Start auto combat immediately
  return await handlePvpAutoCombat(player1Id, player2Id);
}

async function handlePvpAutoCombat(player1Id, player2Id) {
  const player1 = wbManager.getUser(player1Id);
  const player2 = wbManager.getUser(player2Id);
  
  let combatLog = [];
  let turnCount = 0;
  let currentPlayer1Hp = player1.pvp.currentHp;
  let currentPlayer2Hp = player2.pvp.currentHp;
  const maxTurns = 50; // Prevent infinite loops
  
  const stats1 = wbManager.getEquippedStats(player1Id);
  const stats2 = wbManager.getEquippedStats(player2Id);
  const maxHp1 = player1.maxHp + stats1.hpBonus;
  const maxHp2 = player2.maxHp + stats2.hpBonus;
  
  combatLog.push(`‚öîÔ∏è **PVP AUTO-COMBAT** ‚öîÔ∏è`);
  combatLog.push(`**${player1Id}** (Lv.${player1.level}, ${currentPlayer1Hp} HP) VS **${player2Id}** (Lv.${player2.level}, ${currentPlayer2Hp} HP)`);
  combatLog.push('');

  while (currentPlayer1Hp > 0 && currentPlayer2Hp > 0 && turnCount < maxTurns) {
    turnCount++;
    
    // Random who attacks first each turn
    const player1AttacksFirst = Math.random() < 0.5;
    
    if (player1AttacksFirst) {
      // Player 1 attacks Player 2
      const damage = calculatePvpDamage(stats1, stats2);
      currentPlayer2Hp = Math.max(0, currentPlayer2Hp - damage.amount);
      combatLog.push(`Turn ${turnCount}A: üí• ${player1Id} ‚Üí ${player2Id}: ${damage.amount} dmg${damage.isCrit ? ' üéØ' : ''} | HP: ${currentPlayer2Hp}/${maxHp2}`);
      
      if (currentPlayer2Hp <= 0) break;
      
      // Player 2 attacks Player 1
      const damage2 = calculatePvpDamage(stats2, stats1);
      currentPlayer1Hp = Math.max(0, currentPlayer1Hp - damage2.amount);
      combatLog.push(`Turn ${turnCount}B: üí• ${player2Id} ‚Üí ${player1Id}: ${damage2.amount} dmg${damage2.isCrit ? ' üéØ' : ''} | HP: ${currentPlayer1Hp}/${maxHp1}`);
    } else {
      // Player 2 attacks Player 1
      const damage = calculatePvpDamage(stats2, stats1);
      currentPlayer1Hp = Math.max(0, currentPlayer1Hp - damage.amount);
      combatLog.push(`Turn ${turnCount}A: üí• ${player2Id} ‚Üí ${player1Id}: ${damage.amount} dmg${damage.isCrit ? ' üéØ' : ''} | HP: ${currentPlayer1Hp}/${maxHp1}`);
      
      if (currentPlayer1Hp <= 0) break;
      
      // Player 1 attacks Player 2
      const damage2 = calculatePvpDamage(stats1, stats2);
      currentPlayer2Hp = Math.max(0, currentPlayer2Hp - damage2.amount);
      combatLog.push(`Turn ${turnCount}B: üí• ${player1Id} ‚Üí ${player2Id}: ${damage2.amount} dmg${damage2.isCrit ? ' üéØ' : ''} | HP: ${currentPlayer2Hp}/${maxHp2}`);
    }
    
    combatLog.push('');
  }
  
  // Determine winner
  let winner, loser;
  if (currentPlayer1Hp <= 0) {
    winner = player2;
    loser = player1;
    combatLog.push(`üéâ **${player2Id} CHI·∫æN TH·∫ÆNG!** üéâ`);
  } else if (currentPlayer2Hp <= 0) {
    winner = player1;
    loser = player2;
    combatLog.push(`üéâ **${player1Id} CHI·∫æN TH·∫ÆNG!** üéâ`);
  } else {
    // Timeout - determine by remaining HP
    if (currentPlayer1Hp > currentPlayer2Hp) {
      winner = player1;
      loser = player2;
      combatLog.push(`‚è∞ **TIMEOUT!** ${player1Id} th·∫Øng v·ªõi nhi·ªÅu HP h∆°n (${currentPlayer1Hp} vs ${currentPlayer2Hp})`);
    } else if (currentPlayer2Hp > currentPlayer1Hp) {
      winner = player2;
      loser = player1;
      combatLog.push(`‚è∞ **TIMEOUT!** ${player2Id} th·∫Øng v·ªõi nhi·ªÅu HP h∆°n (${currentPlayer2Hp} vs ${currentPlayer1Hp})`);
    } else {
      // Exact tie - random winner
      winner = Math.random() < 0.5 ? player1 : player2;
      loser = winner === player1 ? player2 : player1;
      combatLog.push(`‚è∞ **TIMEOUT!** H√≤a! ${winner === player1 ? player1Id : player2Id} th·∫Øng may m·∫Øn!`);
    }
  }
  
  // Update stats
  winner.pvp.stats.wins++;
  winner.pvp.stats.totalFights++;
  loser.pvp.stats.losses++;
  loser.pvp.stats.totalFights++;
  
  // Rewards
  const winnerId = winner === player1 ? player1Id : player2Id;
  const xpReward = Math.floor(loser.level * 5 * XP_MULTIPLIER);
  const goldReward = loser.level * 10;
  
  winner.xp += xpReward;
  userManager.updateMoney(winnerId, goldReward);
  
  // Reset PvP state
  player1.pvp.inPvP = false;
  player1.pvp.opponent = null;
  delete player1.pvp.currentHp;
  
  player2.pvp.inPvP = false;
  player2.pvp.opponent = null;
  delete player2.pvp.currentHp;
  
  wbManager.saveUsers();
  
  combatLog.push(`Tr·∫≠n ƒë·∫•u k·∫øt th√∫c sau ${turnCount} turns!`);
  combatLog.push(`üèÜ **${winnerId}** nh·∫≠n ƒë∆∞·ª£c: ${xpReward} XP v√† ${goldReward} xu`);
  combatLog.push(`üìä PvP Record: ${winner.pvp.stats.wins}W/${winner.pvp.stats.losses}L`);
  
  return combatLog.join('\n');
}

function calculatePvpDamage(attackerStats, defenderStats) {
  const baseDamage = Math.max(1, attackerStats.attack - defenderStats.defense);
  const critChance = 0.15; // 15% crit chance
  const isCrit = Math.random() < critChance;
  const finalDamage = isCrit ? Math.floor(baseDamage * 1.5) : baseDamage;
  
  return {
    amount: finalDamage,
    isCrit: isCrit
  };
}

// --- Skill Command Handler ---
async function handleSkill({ userId, args }) {
  const wbUser = wbManager.getUser(userId);
  const sub = args[1]?.toLowerCase();
  if (!sub) {
    // Show owned and equipped skills
    let text = '--- üßô‚Äç‚ôÇÔ∏è **K·ª∏ NƒÇNG C·ª¶A B·∫†N** ---\n';
    const owned = wbUser.skills || [];
    const equipped = wbUser.equippedSkills || [];
    if (owned.length === 0) return text + 'B·∫°n ch∆∞a s·ªü h·ªØu k·ªπ nƒÉng n√†o.';
    for (const skillId of owned) {
      const skill = wbManager.getSkill(skillId);
      if (!skill) continue;
      const isEquipped = equipped.includes(skillId) ? ' [ƒê√£ trang b·ªã]' : '';
      const cd = wbUser.skillCooldowns?.[skillId] || 0;
      text += `‚Ä¢ ${skill.name}${isEquipped} - MP: ${skill.mp_cost}, CD: ${skill.cooldown}, M√¥ t·∫£: ${skill.description} ${cd > 0 ? `(H·ªìi: ${cd} l∆∞·ª£t)` : ''}\n`;
    }
    return text;
  }
  if (sub === 'equip') {
    const skillId = args[2];
    if (!skillId) return '‚ùå Thi·∫øu ID k·ªπ nƒÉng.';
    const result = wbManager.equipSkill(userId, skillId);
    return result.success ? '‚úÖ ' + result.message : '‚ùå ' + result.message;
  }
  if (sub === 'unequip') {
    const skillId = args[2];
    if (!skillId) return '‚ùå Thi·∫øu ID k·ªπ nƒÉng.';
    const result = wbManager.unequipSkill(userId, skillId);
    return result.success ? '‚úÖ ' + result.message : '‚ùå ' + result.message;
  }
  if (sub === 'use') {
    const skillId = args[2];
    if (!skillId) return '‚ùå Thi·∫øu ID k·ªπ nƒÉng.';
    const result = wbManager.useSkill(userId, skillId);
    return result.success ? '‚úÖ ' + result.message : '‚ùå ' + result.message;
  }
  return '‚ùå L·ªánh skill kh√¥ng h·ª£p l·ªá.';
}

// --- Main Command Executor ---

export default {
  name: 'wb',
  description: 'H·ªá th·ªëng World Boss n√¢ng cao (info, hunt, pve, equipment, shop, quest...)',
  usage: '!wb <subcommand> [args...]',
  aliases: ['worldboss'],

  async execute({ userId, args }) {
    userManager.incrementCommandCount(userId);
    const subcommand = args[0]?.toLowerCase();

    switch (subcommand) {
      case 'info':
      case 'i':
        return await handleInfo({ userId, args });
      case 'map':
      case 'maps':
        return await handleMap({ userId, args });
      case 'hunt':
      case 'h':
        return await handleHunt({ userId, args });
      case 'pve':
      case 'attack':
      case 'fight':
        return await handlePve({ userId, args: args.slice(1) });
      case 'inv':
      case 'inventory':
      case 'bag':
        return await handleInventory({ userId });
      case 'eq':
      case 'equip':
      case 'equipment':
        return await handleEquipment({ userId, args });
      case 'shop':
      case 'store':
        return await handleShop({ userId, args });
      case 'use':
      case 'consume':
        return await handleUse({ userId, args });
      case 'quest':
      case 'q':
        if (args[1] === 'claim') {
          return await handleQuestClaim({ userId });
        }
        return await handleQuests({ userId });
      case 'stats':
      case 'statistics':
        return await handleStats({ userId });
      case 'pvp':
        return await handlePvp({ userId, args });
      case 'rest':
      case 'sleep':
        return await handleRest({ userId });
      case 'skill':
        return await handleSkill({ userId, args });
      default:
        return `--- üåü **H∆Ø·ªöNG D·∫™N WORLD BOSS** ---

**üéÆ L·ªánh c∆° b·∫£n:**
\`wb info\` - Xem th√¥ng tin nh√¢n v·∫≠t
\`wb map\` - Xem t·∫•t c·∫£ b·∫£n ƒë·ªì c√≥ s·∫µn
\`wb hunt <map_id>\` - V√†o b·∫£n ƒë·ªì ƒë·ªÉ sƒÉn qu√°i
\`wb pve\` - T·∫•n c√¥ng t·ª´ng l∆∞·ª£t (c·ªï ƒëi·ªÉn)
\`wb pve auto\` - ‚ö° Auto-combat ƒë·∫øn k·∫øt th√∫c
\`wb pve safe\` - üõ°Ô∏è Auto-combat v·ªõi safe stop (HP < 70%)
\`wb rest\` - üí§ Ngh·ªâ ng∆°i ƒë·ªÉ h·ªìi HP (5 ph√∫t cooldown)

**üéí Qu·∫£n l√Ω ƒë·ªì ƒë·∫°c:**
\`wb inventory\` - Xem t√∫i ƒë·ªì
\`wb equip\` - Qu·∫£n l√Ω trang b·ªã
\`wb use <item>\` - S·ª≠ d·ª•ng v·∫≠t ph·∫©m

**üè™ Mua b√°n:**
\`wb shop\` - Xem c·ª≠a h√†ng
\`wb shop buy <item>\` - Mua v·∫≠t ph·∫©m
\`wb shop sell <item>\` - B√°n v·∫≠t ph·∫©m

**üìã Nhi·ªám v·ª• & Th·ªëng k√™:**
\`wb quest\` - Xem nhi·ªám v·ª• h√†ng ng√†y
\`wb quest claim\` - Nh·∫≠n th∆∞·ªüng quest
\`wb stats\` - Xem th·ªëng k√™ c√° nh√¢n

**‚öîÔ∏è PvP:**
\`wb pvp\` - Xem h·ªá th·ªëng PvP
\`wb pvp <userId>\` - Th√°ch ƒë·∫•u ng∆∞·ªùi ch∆°i  
\`wb pvp ac\` - Ch·∫•p nh·∫≠n (auto combat)

üåü **Xem b·∫£n ƒë·ªì v·ªõi \`wb map\`, sau ƒë√≥ b·∫Øt ƒë·∫ßu h√†nh tr√¨nh v·ªõi \`wb hunt <map_id>\`!**`;
    }
  }
};