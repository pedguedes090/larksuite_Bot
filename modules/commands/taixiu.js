// modules/commands/taxiu.js
import UserManager from '../userManager.js';

// --- C·∫•u h√¨nh Game ---
const TAI_THRESHOLD = 10; // T·ªïng ƒëi·ªÉm t·ª´ 11 tr·ªü l√™n l√† T√†i
const WIN_MULTIPLIER = 0.95; // Ng∆∞·ªùi ch∆°i nh·∫≠n 95% ti·ªÅn th·∫Øng (nh√† c√°i thu 5% ph√≠)
const MIN_BET = 100; // M·ª©c c∆∞·ª£c t·ªëi thi·ªÉu

// --- H√†m h·ªó tr·ª£ ---
const rollDice = () => Math.floor(Math.random() * 6) + 1;

export default {
  name: 'taxiu',
  description: 'Ch∆°i game T√†i X·ªâu, c∆∞·ª£c ti·ªÅn v√† th·ª≠ v·∫≠n may.',
  usage: '!taxiu <t√†i|x·ªâu> <s·ªë ti·ªÅn|all>',
  aliases: ['tx'],
  adminOnly: false,

  async execute({ userId, args, prefix }) {
    const userManager = UserManager.getInstance();
    
    // TƒÉng b·ªô ƒë·∫øm l·ªánh cho ng∆∞·ªùi d√πng
    userManager.incrementCommandCount(userId);
    const user = userManager.getUser(userId);

    // --- 1. Validate Input ---
    const [choice, betAmountStr] = args;
    const usageMessage = `üí° **S·ª≠ d·ª•ng l·ªánh:**\n\`${prefix}taxiu <t√†i|x·ªâu> <s·ªë ti·ªÅn|all>\`\n\nV√≠ d·ª•:\n ‚Ä¢ \`${prefix}taxiu t√†i 5000\`\n ‚Ä¢ \`${prefix}taxiu x·ªâu all\``;

    if (!choice || !betAmountStr) {
      return usageMessage;
    }

    const normalizedChoice = choice.toLowerCase();
    if (normalizedChoice !== 't√†i' && normalizedChoice !== 'x·ªâu') {
      return `‚ùå **L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!** Vui l√≤ng ch·ªçn "t√†i" ho·∫∑c "x·ªâu".\n\n${usageMessage}`;
    }

    let betAmount;
    if (['all', 't·∫•t', 't·∫•tc·∫£', 'tattay'].includes(betAmountStr.toLowerCase())) {
        betAmount = user.money;
    } else {
        betAmount = parseInt(betAmountStr, 10);
    }

    if (isNaN(betAmount) || betAmount <= 0) {
      return '‚ùå **S·ªë ti·ªÅn c∆∞·ª£c kh√¥ng h·ª£p l·ªá!** Vui l√≤ng nh·∫≠p m·ªôt s·ªë d∆∞∆°ng.';
    }
    
    if (betAmount < MIN_BET) {
        return `‚ùå **M·ª©c c∆∞·ª£c t·ªëi thi·ªÉu l√† ${MIN_BET.toLocaleString('vi-VN')}!**`;
    }

    if (betAmount > user.money) {
      return `üò• **Kh√¥ng ƒë·ªß ti·ªÅn!**\nüí∞ B·∫°n ch·ªâ c√≥ **${user.money.toLocaleString('vi-VN')}** ƒë·ªÉ c∆∞·ª£c.`;
    }

    // --- 2. Game Logic ---
    try {
      // Tr·ª´ ti·ªÅn c∆∞·ª£c ngay l·∫≠p t·ª©c ƒë·ªÉ tr√°nh gian l·∫≠n
      userManager.updateMoney(userId, -betAmount);

      const dice = [rollDice(), rollDice(), rollDice()];
      const sum = dice.reduce((a, b) => a + b, 0);

      // Ki·ªÉm tra "B√£o" (b·ªô ba ƒë·ªìng nh·∫•t), n·∫øu c√≥ nh√† c√°i th·∫Øng
      const isTriple = dice[0] === dice[1] && dice[1] === dice[2];
      const result = sum > TAI_THRESHOLD ? 't√†i' : 'x·ªâu';
      
      let win = false;
      let winnings = 0;

      if (isTriple) {
        // Nh√† c√°i th·∫Øng khi c√≥ b√£o
        win = false;
      } else if (normalizedChoice === result) {
        // Ng∆∞·ªùi ch∆°i th·∫Øng
        win = true;
        winnings = betAmount + Math.floor(betAmount * WIN_MULTIPLIER);
      }
      // N·∫øu thua, winnings v·∫´n l√† 0

      if (win) {
        userManager.updateMoney(userId, winnings);
      }
      
      const newUser = userManager.getUser(userId);

      // --- 3. Format Response ---
      let response = `üé≤ **K·∫æT QU·∫¢ T√ÄI X·ªàU** üé≤\n\n`;
      response += `‚Ä¢ X√∫c x·∫Øc: **[ ${dice.join(' ] - [ ')} ]**\n`;
      response += `‚Ä¢ T·ªïng: **${sum}** n√∫t ‚û† **${result.toUpperCase()}**\n\n`;

      if (isTriple) {
          response += `üå™Ô∏è **B√ÉO!** R·∫•t ti·∫øc, nh√† c√°i ƒë√£ th·∫Øng. B·∫°n m·∫•t s·ªë ti·ªÅn ƒë√£ c∆∞·ª£c.\n`;
      } else if (win) {
        response += `üéâ **CH√öC M·ª™NG! B·∫†N TH·∫ÆNG**\n`;
        response += `‚Ä¢ B·∫°n ƒë√£ c∆∞·ª£c **${betAmount.toLocaleString('vi-VN')}** v√†o **${normalizedChoice.toUpperCase()}**.\n`;
        response += `‚Ä¢ Ti·ªÅn th·∫Øng (ƒë√£ bao g·ªìm 5% ph√≠): **+${(winnings - betAmount).toLocaleString('vi-VN')}** üí∞\n`;
      } else {
        response += `üò• **R·∫§T TI·∫æC! B·∫†N THUA**\n`;
        response += `‚Ä¢ B·∫°n ƒë√£ c∆∞·ª£c **${betAmount.toLocaleString('vi-VN')}** v√†o **${normalizedChoice.toUpperCase()}** nh∆∞ng k·∫øt qu·∫£ l√† **${result.toUpperCase()}**.\n`;
      }

      response += `\nüìä S·ªë d∆∞ m·ªõi c·ªßa b·∫°n: **${newUser.money.toLocaleString('vi-VN')}**`;

      return response;

    } catch (error) {
        console.error('‚ùå L·ªói trong l·ªánh taxiu:', error);
        // Ho√†n l·∫°i ti·ªÅn n·∫øu c√≥ l·ªói x·∫£y ra
        userManager.updateMoney(userId, betAmount);
        return `‚ùå ƒê√£ x·∫£y ra l·ªói h·ªá th·ªëng khi x·ª≠ l√Ω l·ªánh. Ti·ªÅn c∆∞·ª£c c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ho√†n l·∫°i.`;
    }
  }
};