import UserManager from '../userManager.js';
import EventManager from '../eventManager.js';

const MIN_BET = 100;
const eventManager = EventManager.getInstance();
const FACES = [
  { name: 'b·∫ßu', emoji: 'üçê' },
  { name: 'cua', emoji: 'ü¶Ä' },
  { name: 't√¥m', emoji: 'ü¶û' },
  { name: 'c√°', emoji: 'üêü' },
  { name: 'g√†', emoji: 'üêì' },
  { name: 'nai', emoji: 'ü¶å' }
];
const FACE_NAMES = FACES.map(f => f.name);

function getFaceEmoji(name) {
  const f = FACES.find(f => f.name === name);
  return f ? f.emoji : name;
}

function randomFaces() {
  // Random 3 m·∫∑t
  return [0, 1, 2].map(() => FACES[Math.floor(Math.random() * FACES.length)].name);
}

function parseBets(args, userMoney) {
  // Cho ph√©p: !baucua b·∫ßu 1000 cua 500 c√° 2000
  // ho·∫∑c !baucua b·∫ßu cua c√° 1000
  let bets = {};
  let i = 0;
  let lastBet = null;
  while (i < args.length) {
    const arg = args[i].toLowerCase();
    if (FACE_NAMES.includes(arg)) {
      // N·∫øu sau m·∫∑t l√† s·ªë th√¨ l·∫•y s·ªë, kh√¥ng th√¨ l·∫•y lastBet
      let bet = lastBet;
      if (i + 1 < args.length && !isNaN(args[i + 1])) {
        bet = parseInt(args[i + 1], 10);
        i++;
      }
      bets[arg] = bet;
      lastBet = bet;
    } else if (!isNaN(arg)) {
      lastBet = parseInt(arg, 10);
    }
    i++;
  }
  // N·∫øu ch·ªâ c√≥ 1 s·ªë ti·ªÅn v√† nhi·ªÅu m·∫∑t, √°p d·ª•ng cho t·∫•t c·∫£ m·∫∑t
  if (Object.values(bets).every(v => v == null) && lastBet) {
    bets = {};
    args.forEach(arg => {
      if (FACE_NAMES.includes(arg.toLowerCase())) bets[arg.toLowerCase()] = lastBet;
    });
  }
  // L·ªçc c√°c c∆∞·ª£c h·ª£p l·ªá
  let totalBet = 0;
  for (const [face, bet] of Object.entries(bets)) {
    if (!FACE_NAMES.includes(face) || !bet || isNaN(bet) || bet < MIN_BET) {
      delete bets[face];
    } else {
      totalBet += bet;
    }
  }
  if (totalBet > userMoney) return { error: 'Kh√¥ng ƒë·ªß ti·ªÅn ƒë·ªÉ ƒë·∫∑t c∆∞·ª£c t·ªïng c·ªông ' + totalBet.toLocaleString('vi-VN') + ' xu.' };
  if (Object.keys(bets).length === 0) return { error: 'C√∫ ph√°p sai ho·∫∑c s·ªë ti·ªÅn c∆∞·ª£c kh√¥ng h·ª£p l·ªá.' };
  return { bets, totalBet };
}

export default {
  name: 'baucua',
  description: 'Ch∆°i game B·∫ßu Cua T√¥m C√°, c∆∞·ª£c nhi·ªÅu m·∫∑t c√πng l√∫c!',
  usage: '!baucua <b·∫ßu/cua/t√¥m/c√°/g√†/nai> <s·ªë ti·ªÅn> [<b·∫ßu/cua/t√¥m/c√°/g√†/nai> <s·ªë ti·ªÅn2> ...] ho·∫∑c !baucua b·∫ßu cua c√° 1000',
  aliases: ['bctc', 'bau', 'cua', 'tom', 'ca', 'ga', 'nai'],
  adminOnly: false,

  async execute({ userId, args, prefix }) {
    const userManager = UserManager.getInstance();
    userManager.incrementCommandCount(userId);
    const user = userManager.getUser(userId);

    if (!args || args.length === 0) {
      return `üé≤ **C√°ch ch∆°i B·∫ßu Cua:**\n\`${prefix}baucua <b·∫ßu/cua/t√¥m/c√°/g√†/nai> <s·ªë ti·ªÅn> [<b·∫ßu/cua/t√¥m/c√°/g√†/nai> <s·ªë ti·ªÅn2> ...]\`\nVD: \`${prefix}baucua b·∫ßu 1000 cua 500 c√° 2000\`\nHo·∫∑c: \`${prefix}baucua t√¥m 1000\`\n\nC√°c m·∫∑t: ${FACES.map(f => `${f.emoji} ${f.name}`).join(', ')}\nM·ª©c c∆∞·ª£c t·ªëi thi·ªÉu: ${MIN_BET.toLocaleString('vi-VN')} xu.`;
    }

    const { bets, totalBet, error } = parseBets(args, user.money);
    if (error) return '‚ùå ' + error;
    if (totalBet < MIN_BET) return `‚ùå T·ªïng c∆∞·ª£c t·ªëi thi·ªÉu l√† ${MIN_BET.toLocaleString('vi-VN')} xu.`;

    // Tr·ª´ ti·ªÅn c∆∞·ª£c
    userManager.updateMoney(userId, -totalBet);

    // L·∫Øc x√∫c x·∫Øc
    const result = randomFaces();
    // ƒê·∫øm s·ªë l·∫ßn m·ªói m·∫∑t xu·∫•t hi·ªán
    const counts = {};
    result.forEach(face => { counts[face] = (counts[face] || 0) + 1; });

    // T√≠nh ti·ªÅn th·∫Øng v·ªõi s·ª± ki·ªán
    let totalWin = 0;
    let detail = '';
    let eventMultiplier = 1.0;
    let eventMessage = '';
    
    // Ki·ªÉm tra s·ª± ki·ªán
    if (eventManager.isEventActive('happy_hour_baucua')) {
      eventMultiplier = eventManager.getMultiplier('baucua');
      const event = eventManager.getEvent('happy_hour_baucua');
      const timeLeft = eventManager.getTimeRemaining('happy_hour_baucua');
      const timeStr = eventManager.formatTimeRemaining(timeLeft);
      eventMessage = `\nüéâ **${event.title}** - ${timeStr} c√≤n l·∫°i!`;
    } else if (eventManager.isEventActive('gold_rush')) {
      eventMultiplier = eventManager.getMultiplier('global_gold');
      const event = eventManager.getEvent('gold_rush');
      const timeLeft = eventManager.getTimeRemaining('gold_rush');
      const timeStr = eventManager.formatTimeRemaining(timeLeft);
      eventMessage = `\nüí∞ **${event.title}** - ${timeStr} c√≤n l·∫°i!`;
    }
    
    const PAYOUT = 1.9 * eventMultiplier;
    
    for (const [face, bet] of Object.entries(bets)) {
      const winCount = counts[face] || 0;
      if (winCount > 0) {
        const win = Math.floor(bet * PAYOUT * winCount);
        totalWin += win;
        const multiplierText = eventMultiplier > 1.0 ? ` √ó ${eventMultiplier.toFixed(1)}` : '';
        detail += `‚Ä¢ ${getFaceEmoji(face)} **${face}**: ƒê·∫∑t ${bet.toLocaleString('vi-VN')} √ó ${winCount} √ó 1.9${multiplierText} = +${win.toLocaleString('vi-VN')} xu\n`;
      } else {
        detail += `‚Ä¢ ${getFaceEmoji(face)} **${face}**: ƒê·∫∑t ${bet.toLocaleString('vi-VN')} √ó 0 = -${bet.toLocaleString('vi-VN')} xu\n`;
      }
    }
    if (totalWin > 0) userManager.updateMoney(userId, totalWin);
    const newUser = userManager.getUser(userId);

    // Hi·ªÉn th·ªã k·∫øt qu·∫£
    let response = `üé≤ **K·∫æT QU·∫¢ B·∫¶U CUA** üé≤${eventMessage}\n\n`;
    response += `K·∫øt qu·∫£: ${result.map(f => getFaceEmoji(f)).join('  ')}\n\n`;
    response += detail;
    if (totalWin === totalBet) {
      response += `\nüòê **B·∫°n h√≤a ti·ªÅn, nh·∫≠n l·∫°i s·ªë ƒë√£ c∆∞·ª£c!**`;
    } else if (totalWin > totalBet) {
      response += `\nüéâ **B·∫°n th·∫Øng t·ªïng c·ªông: +${(totalWin - totalBet).toLocaleString('vi-VN')} xu!**`;
    } else {
      response += `\nüò• **B·∫°n thua -${(totalBet - totalWin).toLocaleString('vi-VN')} xu!**`;
    }
    response += `\n\nüí∞ **S·ªë d∆∞ hi·ªán t·∫°i:** ${newUser.money.toLocaleString('vi-VN')} xu`;
    return response;
  }
};
